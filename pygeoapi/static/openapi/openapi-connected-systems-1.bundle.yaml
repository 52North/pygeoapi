openapi: 3.1.0
info:
  title: 'OGC API - Connected Systems - Part 1: Feature Resources'
  version: 0.0.1
  description: |-
    Example OpenAPI specification for part 1 of [OGC API - Connected Systems](https://github.com/opengeospatial/connected_systems).  
    This Standard also conforms to [OGC API - Features](https://ogcapi.ogc.org/features/).
  contact:
    name: OGC API Support
    url: https://www.ogc.org/contact
    email: info@ogc.org
  license:
    name: OGC License
    url: https://www.ogc.org/ogc/Document
  x-logo:
    url: https://www.ogc.org/wp-content/uploads/2023/03/OGC-1.svg
    backgroundColor: '#FFFFFF'
    altText: OGC logo
    href: https://www.ogc.org
servers:
  - url: https://api.georobotix.io/ogc/t18/api
    description: OGC Testbed Demo Server
  - url: http://localhost:8181/sensorhub/api
    description: Local test server
tags:
  - name: Capabilities
    description: Essential characteristics of the information available from the API.
  - name: Collections
    description: |-
      Collections allow a client to discover available resources in a way that is conformant with OGC API Features
      and OGC API Common.

      All Connected Systems resource types are always available through their canonical collections at the service root,
      but OGC API Collections provide an additional way of grouping and accessing these resources.
      In particular, Collections allow a service provider to group resources logically according to any criteria.

      For example, collections can be used to:
        - Group all `Systems` of the same type (e.g. all UAV platforms, all hydrological sensors, etc.).
        - Group all `Procedures` of the same type (e.g. all platform types, all CBRNE sensor models, etc.).
        - Group resources by project (e.g. all `Deployments`, `Systems`, `Datastreams` and `Sampling Features` relevant to a given data acquisition campaign)
  - name: Systems
    description: |-
      Systems are entities that can produce data feeds and/or receive commands (e.g. sensors and sensor networks, platforms, actuators,
      processing components, etc.). Many systems can be classified as 'observing systems' that produce observations of one or more
      features of interest.
  - name: Procedures
    description: |-
      Procedures provides information about the procedure implemented by a system to accomplish its task(s).
      For hardware equipment, it usually corresponds to the equipment's datasheet.
      For human sensing or sampling tasks, the procedure describes the steps or methodology that must be followed by the operator.
  - name: Deployments
    description: Deployments describe how systems are being deployed at a particular place and time.
  - name: Sampling Features
    description: |-
      Sampling Features link Systems with ultimate features of interest, describing exactly what part of a larger feature is being
      interacted with.
  - name: Properties
    description: |-
      Property resources provide the definitions of derived properties that are used throughout the API.

      Derived properties are specific to a type of feature, a type of system, or even to a particular organization, project or deployment.
      Property definitions are referenced by feature schemas, system and deployment descriptions, datastream and control stream schemas, etc.

      Depending on the context they are used in, they can represent properties that are asserted (e.g. system characteristic), observed
      (observed or observable property) or controlled (controlled or controllable property).
paths:
  /:
    get:
      summary: Landing Page
      description: The landing page provides links to the API definition, the conformance statements and to the feature collections in this dataset.
      tags:
        - Capabilities
      responses:
        '200':
          $ref: '#/components/responses/landingPage'
  /conformance:
    get:
      summary: Conformance
      description: A list of all conformance classes specified in a standard that the server conforms to.
      tags:
        - Capabilities
      responses:
        '200':
          $ref: '#/components/responses/conformance'
  /collections:
    get:
      summary: List all available collections
      description: List or search all collections available from this server endpoint.
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/geom'
        - $ref: '#/components/parameters/keyword'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/collections'
  /collections/{collectionId}:
    get:
      summary: Retrieve collection metadata
      description: Retrieve metadata about a specific collection.
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionId'
      responses:
        '200':
          $ref: '#/components/responses/collection'
  /collections/{collectionId}/items:
    get:
      summary: List all items in a collection
      description: |-
        Retrieve collections items, which can be Systems, Procedures, Deployments, Sampling Features, or any other features.

        Please see the documentation of the respective root collections to see the specifics of each feature type.
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/featureCollection'
  /collections/{collectionId}/items/{featureId}:
    get:
      summary: Retrieve a specific feature
      description: Retrieve a specific feature from a collection.
      tags:
        - Collections
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/featureId'
      responses:
        '200':
          $ref: '#/components/responses/feature'
  /systems:
    get:
      summary: List all available systems
      description: |-
        List or search all `System` resources available from this server endpoint.

        By default, only top level systems are included (i.e. subsystems are ommitted) unless the `parent` query parameter is set.
      tags:
        - Systems
      parameters:
        - $ref: '#/components/parameters/idList'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/geom'
        - $ref: '#/components/parameters/keyword'
        - $ref: '#/components/parameters/parentIdList'
        - $ref: '#/components/parameters/procedureIdList'
        - $ref: '#/components/parameters/foiIdList'
        - $ref: '#/components/parameters/obsPropIdList'
        - $ref: '#/components/parameters/controlPropIdList'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/systemCollection'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    post:
      summary: Create new systems
      description: |-
        Add one or more new top-level `System` resources (i.e. these systems will have no parent).

        Note that it is possible to create multiple resources in a single batch request.
        In this case, several resource descriptions are provided in the content body inside a JSON array.
        On success, the server will send a `200` response with the list of URIs of all created resources,
        in the same order as the array in the request.

        If a client posts a new description of an existing system with a more recent validity period
        (i.e. starting after the validity period of the current description), the provided description
        will become the current one. In order for the server to identify the existing system, its local
        ID must be included in the payload using the `id` property. If system history is supported, the
        old description is also archived in the system history. 
      tags:
        - Systems
      requestBody:
        $ref: '#/components/requestBodies/systemOrArray'
      responses:
        '200':
          $ref: '#/components/responses/resourceLinks'
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
  /collections/{systemCollectionId}/items:
    get:
      summary: List all systems in a collection
      description: |-
        List or search all systems available in a given collection.
        By default, only top level systems are listed (i.e. subsystems are ommitted) unless the "parent" query parameter is set
      tags:
        - Systems
      parameters:
        - $ref: '#/components/parameters/collectionId'
        - $ref: '#/components/parameters/idList'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/geom'
        - $ref: '#/components/parameters/keyword'
        - $ref: '#/components/parameters/parentIdList'
        - $ref: '#/components/parameters/procedureIdList'
        - $ref: '#/components/parameters/foiIdList'
        - $ref: '#/components/parameters/obsPropIdList'
        - $ref: '#/components/parameters/controlPropIdList'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/systemCollection'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    post:
      summary: Add systems to a collection
      description: |-
        Add new or existing systems to the parent collection.

        If actual system descriptions are provided in the body, new systems will be created and added to the parent collection.
        The new systems will also be available via the root collection at `/systems`.

        Existing systems can also be added to a collection by providing one or more links to system resources.
      tags:
        - Systems
      requestBody:
        $ref: '#/components/requestBodies/systemOrArrayOrRefs'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
  /systems/{systemId}:
    get:
      summary: Retrieve a system description by ID
      description: |-
        This will return the latest description of the system valid before or at the current time, by default.

        If system history is supported by the server, descriptions of the system valid at past (or future) time
        can be accessed using the `datetime` parameter or through the `history` sub-collection.
      tags:
        - Systems
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/datetime'
      responses:
        '200':
          $ref: '#/components/responses/system'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    put:
      summary: Update a system description
      description: |-
        This will completely replace the existing description of the system with the provided content.

        If system history is supported and the `validTime` property starts after the time of the previous description,
        the provided description becomes the current one and all previous descriptions are made available via the
        `history` sub collection.
      tags:
        - Systems
      parameters:
        - $ref: '#/components/parameters/systemId'
      requestBody:
        $ref: '#/components/requestBodies/system'
      responses:
        '204':
          $ref: '#/components/responses/204_PUT'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    delete:
      summary: Delete a system
      description: |-
        This will delete the system and remove it from all collections it is associated to.

        If the `cascade` parameter is used, all associated sub-resources hosted by the same server
        (sampling features, datastreams, command streams, observations, and commmands) are also deleted.

        If system history is supported, all historical descriptions are deleted as well.
      tags:
        - Systems
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/cascade'
      responses:
        '204':
          $ref: '#/components/responses/204_DELETE'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409_DELETE'
        5XX:
          $ref: '#/components/responses/5XX'
  /systems/{systemId}/members:
    get:
      summary: List subsystems of a parent system
      description: |-
        List or search all `System` resources that are subsystems of a specific parent system.

        Note that individual members can also be retrieved by ID directly on the root "systems" collection.
      tags:
        - Systems
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/idList'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/geom'
        - $ref: '#/components/parameters/keyword'
        - $ref: '#/components/parameters/parentIdList'
        - $ref: '#/components/parameters/procedureIdList'
        - $ref: '#/components/parameters/foiIdList'
        - $ref: '#/components/parameters/obsPropIdList'
        - $ref: '#/components/parameters/controlPropIdList'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/systemCollection'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    post:
      summary: Add subsystems to a parent system
      tags:
        - Systems
      parameters:
        - $ref: '#/components/parameters/systemId'
      requestBody:
        $ref: '#/components/requestBodies/systemOrArray'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
  /procedures:
    get:
      summary: List all available procedures
      description: List or search all `Procedure` resources available from this server endpoint.
      tags:
        - Procedures
      parameters:
        - $ref: '#/components/parameters/idList'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/keyword'
        - $ref: '#/components/parameters/foiIdList'
        - $ref: '#/components/parameters/obsPropIdList'
        - $ref: '#/components/parameters/controlPropIdList'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/procedureCollection'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    post:
      summary: Create new procedures
      description: |-
        Add one or more new `Procedure` resources.

        Note that it is possible to create multiple resources in a single batch request.
        In this case, several resource descriptions are provided in the content body inside a JSON array.
        On success, the server will send a `200` response with the list of URIs of all created resources,
        in the same order as the array in the request.
      tags:
        - Procedures
      requestBody:
        $ref: '#/components/requestBodies/procedureOrArray'
      responses:
        '200':
          $ref: '#/components/responses/resourceLinks'
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
  /procedures/{procedureId}:
    get:
      summary: Retrieve a procedure description by ID
      tags:
        - Procedures
      parameters:
        - $ref: '#/components/parameters/procedureId'
      responses:
        '200':
          description: OK. Successful request
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/procedure'
            application/sml+json:
              schema:
                $ref: '#/components/schemas/procedure-2'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    put:
      summary: Update a procedure description
      description: This will completely replace the existing description of the procedure with the provided content.
      tags:
        - Procedures
      parameters:
        - $ref: '#/components/parameters/procedureId'
      requestBody:
        content:
          application/geo+json:
            schema:
              $ref: '#/components/schemas/procedure'
          application/sml+json:
            schema:
              $ref: '#/components/schemas/procedure-2'
      responses:
        '204':
          $ref: '#/components/responses/204_PUT'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    delete:
      summary: Delete a procedure
      description: This will delete the procedure and remove it from all collections it is associated to.
      tags:
        - Procedures
      parameters:
        - $ref: '#/components/parameters/procedureId'
      responses:
        '204':
          $ref: '#/components/responses/204_DELETE'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409_DELETE'
        5XX:
          $ref: '#/components/responses/5XX'
  /deployments:
    get:
      summary: List all available deployments
      description: List or search all `Deployment` resources available from this server endpoint.
      tags:
        - Deployments
      parameters:
        - $ref: '#/components/parameters/idList'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/geom'
        - $ref: '#/components/parameters/keyword'
        - $ref: '#/components/parameters/systemIdList'
        - $ref: '#/components/parameters/foiIdList'
        - $ref: '#/components/parameters/obsPropIdList'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/deploymentCollection'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    post:
      summary: Create new deployments
      description: |-
        Add one or more new `Deployment` resources.

        Note that it is possible to create multiple resources in a single batch request.
        In this case, several resource descriptions are provided in the content body inside a JSON array.
        On success, the server will send a `200` response with the list of URIs of all created resources,
        in the same order as the array in the request.
      tags:
        - Deployments
      requestBody:
        $ref: '#/components/requestBodies/deploymentOrArray'
      responses:
        '200':
          $ref: '#/components/responses/resourceLinks'
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
  /deployments/{deploymentId}:
    get:
      summary: Retrieve a deployment description by ID
      tags:
        - Deployments
      parameters:
        - $ref: '#/components/parameters/deploymentId'
      responses:
        '200':
          description: OK. Successful request
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/deployment'
            application/sml+json:
              schema:
                $ref: '#/components/schemas/deployment-2'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    put:
      summary: Update a deployment description
      description: This will completely replace the existing description of the deployment with the provided content.
      tags:
        - Deployments
      parameters:
        - $ref: '#/components/parameters/deploymentId'
      requestBody:
        content:
          application/geo+json:
            schema:
              $ref: '#/components/schemas/deployment'
          application/sml+json:
            schema:
              $ref: '#/components/schemas/deployment-2'
      responses:
        '204':
          $ref: '#/components/responses/204_PUT'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    delete:
      summary: Delete a deployment
      description: This will delete the deployment and remove it from all collections it is associated to.
      tags:
        - Deployments
      parameters:
        - $ref: '#/components/parameters/deploymentId'
      responses:
        '204':
          $ref: '#/components/responses/204_DELETE'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409_DELETE'
        5XX:
          $ref: '#/components/responses/5XX'
  /deployments/{deploymentId}/systems:
    get:
      summary: List deployed systems
      description: |-
        List or search systems deployed during a particular deployment.

        By default, only top level systems are listed (i.e. subsystems are ommitted) unless the "parent" query parameter is set.
      tags:
        - Deployments
      parameters:
        - $ref: '#/components/parameters/deploymentId'
        - $ref: '#/components/parameters/idList'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/geom'
        - $ref: '#/components/parameters/keyword'
        - $ref: '#/components/parameters/parentIdList'
        - $ref: '#/components/parameters/procedureIdList'
        - $ref: '#/components/parameters/foiIdList'
        - $ref: '#/components/parameters/obsPropIdList'
        - $ref: '#/components/parameters/controlPropIdList'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/systemCollection'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    post:
      summary: Add systems to a deployment
      description: |-
        Add one or more systems to a deployment.

        Only links to the system descriptions are provided, allowing them to be hosted on a different server. 
      tags:
        - Deployments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links'
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
  /systems/{systemId}/deployments:
    get:
      summary: List deployments of a specific system
      description: ''
      tags:
        - Deployments
        - Systems
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/idList'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/geom'
        - $ref: '#/components/parameters/keyword'
        - $ref: '#/components/parameters/foiIdList'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/deploymentCollection'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
  /samplingFeatures:
    get:
      summary: List all sampling features
      description: List or search all `Sampling Feature` resources available from this server endpoint.
      tags:
        - Sampling Features
      parameters:
        - $ref: '#/components/parameters/idList'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/geom'
        - $ref: '#/components/parameters/keyword'
        - $ref: '#/components/parameters/foiIdList'
        - $ref: '#/components/parameters/obsPropIdList'
        - $ref: '#/components/parameters/controlPropIdList'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/samplingFeatureCollection'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
  /systems/{systemId}/samplingFeatures:
    get:
      summary: List sampling features attached to a specific system
      description: List or search all `Sampling Feature` resources associated to a specific system.
      tags:
        - Systems
        - Sampling Features
      parameters:
        - $ref: '#/components/parameters/systemId'
        - $ref: '#/components/parameters/idList'
        - $ref: '#/components/parameters/bbox'
        - $ref: '#/components/parameters/datetime'
        - $ref: '#/components/parameters/geom'
        - $ref: '#/components/parameters/keyword'
        - $ref: '#/components/parameters/foiIdList'
        - $ref: '#/components/parameters/obsPropIdList'
        - $ref: '#/components/parameters/controlPropIdList'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/samplingFeatureCollection'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    post:
      summary: Create new sampling features
      description: |-
        Add one or more new `Sampling Feature` resources. Sampling features are always created inside, and thus attached to a parent system.

        Note that it is possible to create multiple resources in a single batch request.
        In this case, several resource descriptions are provided in the content body inside a JSON array.
        On success, the server will send a `200` response with the list of URIs of all created resources,
        in the same order as the array in the request.
      tags:
        - Sampling Features
      requestBody:
        $ref: '#/components/requestBodies/samplingFeatureOrArray'
      responses:
        '200':
          $ref: '#/components/responses/resourceLinks'
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
  /samplingFeatures/{featureId}:
    get:
      summary: Retrieve a sampling feature by ID
      tags:
        - Sampling Features
      parameters:
        - $ref: '#/components/parameters/featureId'
      responses:
        '200':
          description: OK. Successful request
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/anySamplingFeature'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    put:
      summary: Update a sampling feature description
      description: This will completely replace the existing description of the sampling feature with the provided content.
      tags:
        - Sampling Features
      parameters:
        - $ref: '#/components/parameters/featureId'
      requestBody:
        content:
          application/geo+json:
            schema:
              $ref: '#/components/schemas/samplingFeature'
      responses:
        '204':
          $ref: '#/components/responses/204_PUT'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    delete:
      summary: Delete a sampling feature
      description: This will delete the sampling feature and remove it from all collections it is associated to.
      tags:
        - Sampling Features
      parameters:
        - $ref: '#/components/parameters/featureId'
      responses:
        '204':
          $ref: '#/components/responses/204_DELETE'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409_DELETE'
        5XX:
          $ref: '#/components/responses/5XX'
  /properties:
    get:
      summary: List all property definitions
      description: List or search all `Property` resources available from this server endpoint.
      tags:
        - Properties
      parameters:
        - $ref: '#/components/parameters/idList'
        - $ref: '#/components/parameters/keyword'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          $ref: '#/components/responses/propertyCollection'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    post:
      summary: Create new properties
      description: |-
        Add one or more new `Property` resources.

        Note that it is possible to create multiple resources in a single batch request.
        In this case, several resource descriptions are provided in the content body inside a JSON array.
        On success, the server will send a `200` response with the list of URIs of all created resources,
        in the same order as the array in the request.
      tags:
        - Properties
      requestBody:
        $ref: '#/components/requestBodies/propertyOrArray'
      responses:
        '200':
          $ref: '#/components/responses/resourceLinks'
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
  /properties/{propId}:
    get:
      summary: Retrieve a property definition by ID
      tags:
        - Properties
      parameters:
        - $ref: '#/components/parameters/propId'
      responses:
        '200':
          $ref: '#/components/responses/property'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    put:
      summary: Update a property definition
      description: This will completely replace the existing definition of the property with the provided content.
      tags:
        - Properties
      parameters:
        - $ref: '#/components/parameters/propId'
      requestBody:
        $ref: '#/components/requestBodies/property'
      responses:
        '204':
          $ref: '#/components/responses/204_PUT'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        5XX:
          $ref: '#/components/responses/5XX'
    delete:
      summary: Delete a property
      description: This will delete the property and remove it from all collections it is associated to.
      tags:
        - Properties
      parameters:
        - $ref: '#/components/parameters/propId'
      responses:
        '204':
          $ref: '#/components/responses/204_DELETE'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409_DELETE'
        5XX:
          $ref: '#/components/responses/5XX'
components:
  schemas:
    link:
      type: object
      required:
        - href
        - rel
      properties:
        href:
          type: string
          example: http://data.example.com/buildings/123
        rel:
          type: string
          example: alternate
        type:
          type: string
          example: application/geo+json
        hreflang:
          type: string
          example: en
        title:
          type: string
          example: Trierer Strasse 70, 53115 Bonn
        length:
          type: integer
    landingPage:
      type: object
      required:
        - links
      properties:
        title:
          type: string
          example: Buildings in Bonn
        description:
          type: string
          example: Access to data about buildings in the city of Bonn via a Web API that conforms to the OGC API Features specification.
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    confClasses:
      type: object
      required:
        - conformsTo
      properties:
        conformsTo:
          type: array
          items:
            type: string
            example: http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core
    datetimeSchema:
      oneOf:
        - title: Time Instant
          description: |-
            ISO 8601 encoded time instant or special value.
            Examples:
              * A time instant: "2020-02-12T23:20:50Z" or "2020-01-15Z"
              * Special indeterminate value: "now", "latest"
          oneOf:
            - title: ISO Date
              type: string
              format: date
            - title: ISO Date/Time
              type: string
              format: date-time
            - title: Special Value
              type: string
              enum:
                - now
                - latest
        - title: Time Period
          description: |-
            ISO 8601 encoded time period that can include special values.
            Examples:
              * A closed interval: "2020-02-12T00:00:00Z/2020-03-18T12:31:12Z" or "2020-01-15Z/2020-02-16Z"
              * An open interval: "2020-02-12T00:00:00Z/.." or "../2020-03-18T12:31:12Z"
              * An interval with indeterminate value: "2020-02-12T00:00:00Z/now", "2020-02-12T00:00:00Z/latest" or "now/.."
          type: array
          minItems: 2,
          maxItems: 2,
          items:
            oneOf:
              - title: ISO Date
                type: string
                format: date
              - title: ISO Date/Time
                type: string
                format: date-time
              - title: Special Value
                type: string
                enum:
                  - now
                  - latest
    extent:
      description: |-
        The extent of the features in the collection. In the Core only spatial and temporal
        extents are specified. Extensions may add additional members to represent other
        extents, for example, thermal or pressure ranges.

        An array of extents is provided for each extent type (spatial, temporal). The first item
        in the array describes the overall extent of the data. All subsequent items describe more
        precise extents, e.g., to identify clusters of data. Clients only interested in the
        overall extent will only need to access the first extent in the array.
      type: object
      properties:
        spatial:
          description: The spatial extent of the features in the collection.
          type: object
          properties:
            bbox:
              description: |-
                One or more bounding boxes that describe the spatial extent of the dataset.
                In the Core only a single bounding box is supported.

                Extensions may support additional areas.
                The first bounding box describes the overall spatial
                extent of the data. All subsequent bounding boxes describe
                more precise bounding boxes, e.g., to identify clusters of data.
                Clients only interested in the overall spatial extent will
                only need to access the first bounding box in the array.
              type: array
              minItems: 1
              items:
                description: |-
                  Each bounding box is provided as four or six numbers, depending on
                  whether the coordinate reference system includes a vertical axis
                  (height or depth):

                  * Lower left corner, coordinate axis 1
                  * Lower left corner, coordinate axis 2
                  * Minimum value, coordinate axis 3 (optional)
                  * Upper right corner, coordinate axis 1
                  * Upper right corner, coordinate axis 2
                  * Maximum value, coordinate axis 3 (optional)

                  If the value consists of four numbers, the coordinate reference system is
                  WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)
                  unless a different coordinate reference system is specified in `crs`.

                  If the value consists of six numbers, the coordinate reference system is WGS 84
                  longitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)
                  unless a different coordinate reference system is specified in `crs`.

                  For WGS 84 longitude/latitude the values are in most cases the sequence of
                  minimum longitude, minimum latitude, maximum longitude and maximum latitude.
                  However, in cases where the box spans the antimeridian the first value
                  (west-most box edge) is larger than the third value (east-most box edge).

                  If the vertical axis is included, the third and the sixth number are
                  the bottom and the top of the 3-dimensional bounding box.

                  If a feature has multiple spatial geometry properties, it is the decision of the
                  server whether only a single spatial geometry property is used to determine
                  the extent or all relevant geometries.
                type: array
                oneOf:
                  - minItems: 4
                    maxItems: 4
                  - minItems: 6
                    maxItems: 6
                items:
                  type: number
                example:
                  - -180
                  - -90
                  - 180
                  - 90
            crs:
              description: |-
                Coordinate reference system of the coordinates in the spatial extent
                (property `bbox`). The default reference system is WGS 84 longitude/latitude.
                In the Core the only other supported coordinate reference system is
                WGS 84 longitude/latitude/ellipsoidal height for coordinates with height.
                Extensions may support additional coordinate reference systems and add
                additional enum values.
              type: string
              enum:
                - http://www.opengis.net/def/crs/OGC/1.3/CRS84
                - http://www.opengis.net/def/crs/OGC/0/CRS84h
              default: http://www.opengis.net/def/crs/OGC/1.3/CRS84
        temporal:
          description: The temporal extent of the features in the collection.
          type: object
          properties:
            interval:
              description: |-
                One or more time intervals that describe the temporal extent of the dataset.
                In the Core only a single time interval is supported.

                Extensions may support multiple intervals.
                The first time interval describes the overall
                temporal extent of the data. All subsequent time intervals describe
                more precise time intervals, e.g., to identify clusters of data.
                Clients only interested in the overall temporal extent will only need
                to access the first time interval in the array (a pair of lower and upper
                bound instants).
              type: array
              minItems: 1
              items:
                description: |-
                  Begin and end times of the time interval. The timestamps are in the
                  temporal coordinate reference system specified in `trs`. By default
                  this is the Gregorian calendar.

                  The value `null` at start or end is supported and indicates a half-bounded interval.
                type: array
                minItems: 2
                maxItems: 2
                items:
                  type: string
                  format: date-time
                  nullable: true
                example:
                  - '2011-11-11T12:22:11Z'
                  - null
            trs:
              description: |-
                Coordinate reference system of the coordinates in the temporal extent
                (property `interval`). The default reference system is the Gregorian calendar.
                In the Core this is the only supported temporal coordinate reference system.
                Extensions may support additional temporal coordinate reference systems and add
                additional enum values.
              type: string
              enum:
                - http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
              default: http://www.opengis.net/def/uom/ISO-8601/0/Gregorian
    collection_schema:
      type: object
      required:
        - id
        - links
      properties:
        id:
          description: identifier of the collection used, for example, in URIs
          type: string
          example: address
        title:
          description: human readable title of the collection
          type: string
          example: address
        description:
          description: a description of the features in the collection
          type: string
          example: An address.
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
          example:
            - href: http://data.example.com/buildings
              rel: item
            - href: http://example.com/concepts/buildings.html
              rel: describedby
              type: text/html
        extent:
          $ref: '#/components/schemas/extent'
        itemType:
          description: indicator about the type of the items in the collection (the default value is 'feature').
          type: string
          default: feature
        crs:
          description: the list of coordinate reference systems supported by the service
          type: array
          items:
            type: string
          default: http://www.opengis.net/def/crs/OGC/1.3/CRS84
          example:
            - http://www.opengis.net/def/crs/OGC/1.3/CRS84
            - http://www.opengis.net/def/crs/EPSG/0/4326
    pointGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          type: array
          minItems: 2
          items:
            type: number
    multipointGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: number
    linestringGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          type: array
          minItems: 2
          items:
            type: array
            minItems: 2
            items:
              type: number
    multilinestringGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiLineString
        coordinates:
          type: array
          items:
            type: array
            minItems: 2
            items:
              type: array
              minItems: 2
              items:
                type: number
    polygonGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          type: array
          items:
            type: array
            minItems: 4
            items:
              type: array
              minItems: 2
              items:
                type: number
    multipolygonGeoJSON:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              minItems: 4
              items:
                type: array
                minItems: 2
                items:
                  type: number
    geometryGeoJSON:
      oneOf:
        - $ref: '#/components/schemas/pointGeoJSON'
        - $ref: '#/components/schemas/multipointGeoJSON'
        - $ref: '#/components/schemas/linestringGeoJSON'
        - $ref: '#/components/schemas/multilinestringGeoJSON'
        - $ref: '#/components/schemas/polygonGeoJSON'
        - $ref: '#/components/schemas/multipolygonGeoJSON'
        - $ref: '#/components/schemas/geometrycollectionGeoJSON'
    geometrycollectionGeoJSON:
      type: object
      required:
        - type
        - geometries
      properties:
        type:
          type: string
          enum:
            - GeometryCollection
        geometries:
          type: array
          items:
            $ref: '#/components/schemas/geometryGeoJSON'
    featureGeoJSON:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/geometryGeoJSON'
        properties:
          type: object
          nullable: true
        id:
          oneOf:
            - type: string
            - type: integer
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
    featureCollectionGeoJSON:
      type: object
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/featureGeoJSON'
        links:
          type: array
          items:
            $ref: '#/components/schemas/link'
        timeStamp:
          type: string
          format: date-time
        numberMatched:
          type: integer
          minimum: 0
        numberReturned:
          type: integer
          minimum: 0
    Feature:
      $schema: http://json-schema.org/draft-07/schema#
      $id: https://geojson.org/schema/Feature.json
      title: GeoJSON Feature
      type: object
      required:
        - type
        - properties
        - geometry
      properties:
        type:
          type: string
          enum:
            - Feature
        id:
          oneOf:
            - type: number
            - type: string
        properties:
          oneOf:
            - type: 'null'
            - type: object
        geometry:
          oneOf:
            - type: 'null'
            - title: GeoJSON Point
              type: object
              required:
                - type
                - coordinates
              properties:
                type:
                  type: string
                  enum:
                    - Point
                coordinates:
                  type: array
                  minItems: 2
                  items:
                    type: number
                bbox:
                  type: array
                  minItems: 4
                  items:
                    type: number
            - title: GeoJSON LineString
              type: object
              required:
                - type
                - coordinates
              properties:
                type:
                  type: string
                  enum:
                    - LineString
                coordinates:
                  type: array
                  minItems: 2
                  items:
                    type: array
                    minItems: 2
                    items:
                      type: number
                bbox:
                  type: array
                  minItems: 4
                  items:
                    type: number
            - title: GeoJSON Polygon
              type: object
              required:
                - type
                - coordinates
              properties:
                type:
                  type: string
                  enum:
                    - Polygon
                coordinates:
                  type: array
                  items:
                    type: array
                    minItems: 4
                    items:
                      type: array
                      minItems: 2
                      items:
                        type: number
                bbox:
                  type: array
                  minItems: 4
                  items:
                    type: number
            - title: GeoJSON MultiPoint
              type: object
              required:
                - type
                - coordinates
              properties:
                type:
                  type: string
                  enum:
                    - MultiPoint
                coordinates:
                  type: array
                  items:
                    type: array
                    minItems: 2
                    items:
                      type: number
                bbox:
                  type: array
                  minItems: 4
                  items:
                    type: number
            - title: GeoJSON MultiLineString
              type: object
              required:
                - type
                - coordinates
              properties:
                type:
                  type: string
                  enum:
                    - MultiLineString
                coordinates:
                  type: array
                  items:
                    type: array
                    minItems: 2
                    items:
                      type: array
                      minItems: 2
                      items:
                        type: number
                bbox:
                  type: array
                  minItems: 4
                  items:
                    type: number
            - title: GeoJSON MultiPolygon
              type: object
              required:
                - type
                - coordinates
              properties:
                type:
                  type: string
                  enum:
                    - MultiPolygon
                coordinates:
                  type: array
                  items:
                    type: array
                    items:
                      type: array
                      minItems: 4
                      items:
                        type: array
                        minItems: 2
                        items:
                          type: number
                bbox:
                  type: array
                  minItems: 4
                  items:
                    type: number
            - title: GeoJSON GeometryCollection
              type: object
              required:
                - type
                - geometries
              properties:
                type:
                  type: string
                  enum:
                    - GeometryCollection
                geometries:
                  type: array
                  items:
                    oneOf:
                      - title: GeoJSON Point
                        type: object
                        required:
                          - type
                          - coordinates
                        properties:
                          type:
                            type: string
                            enum:
                              - Point
                          coordinates:
                            type: array
                            minItems: 2
                            items:
                              type: number
                          bbox:
                            type: array
                            minItems: 4
                            items:
                              type: number
                      - title: GeoJSON LineString
                        type: object
                        required:
                          - type
                          - coordinates
                        properties:
                          type:
                            type: string
                            enum:
                              - LineString
                          coordinates:
                            type: array
                            minItems: 2
                            items:
                              type: array
                              minItems: 2
                              items:
                                type: number
                          bbox:
                            type: array
                            minItems: 4
                            items:
                              type: number
                      - title: GeoJSON Polygon
                        type: object
                        required:
                          - type
                          - coordinates
                        properties:
                          type:
                            type: string
                            enum:
                              - Polygon
                          coordinates:
                            type: array
                            items:
                              type: array
                              minItems: 4
                              items:
                                type: array
                                minItems: 2
                                items:
                                  type: number
                          bbox:
                            type: array
                            minItems: 4
                            items:
                              type: number
                      - title: GeoJSON MultiPoint
                        type: object
                        required:
                          - type
                          - coordinates
                        properties:
                          type:
                            type: string
                            enum:
                              - MultiPoint
                          coordinates:
                            type: array
                            items:
                              type: array
                              minItems: 2
                              items:
                                type: number
                          bbox:
                            type: array
                            minItems: 4
                            items:
                              type: number
                      - title: GeoJSON MultiLineString
                        type: object
                        required:
                          - type
                          - coordinates
                        properties:
                          type:
                            type: string
                            enum:
                              - MultiLineString
                          coordinates:
                            type: array
                            items:
                              type: array
                              minItems: 2
                              items:
                                type: array
                                minItems: 2
                                items:
                                  type: number
                          bbox:
                            type: array
                            minItems: 4
                            items:
                              type: number
                      - title: GeoJSON MultiPolygon
                        type: object
                        required:
                          - type
                          - coordinates
                        properties:
                          type:
                            type: string
                            enum:
                              - MultiPolygon
                          coordinates:
                            type: array
                            items:
                              type: array
                              items:
                                type: array
                                minItems: 4
                                items:
                                  type: array
                                  minItems: 2
                                  items:
                                    type: number
                          bbox:
                            type: array
                            minItems: 4
                            items:
                              type: number
                bbox:
                  type: array
                  minItems: 4
                  items:
                    type: number
        bbox:
          type: array
          minItems: 4
          items:
            type: number
    link-2:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      required:
        - href
      properties:
        href:
          description: URL of target resource
          type: string
          format: uri
          examples:
            - https://data.example.com/link/to/resource
        rel:
          description: Link relation type
          type: string
          examples:
            - alternate
            - self
            - http://www.opengis.net/def/rel/ogc/1.0/conformance
        type:
          description: Media type of target resource
          type: string
          examples:
            - application/json
            - image/tiff; application=geotiff
        hreflang:
          description: Language tag of target resource (2-letter language code, followed by optional 2-letter region code)
          type: string
          minLength: 1
          pattern: ^([a-z]{2}(-[A-Z]{2})?)|x-default$
          examples:
            - en-US
            - fr-FR
            - de
        title:
          description: Title of target resource
          type: string
          minLength: 1
          examples:
            - Resource Name
        uid:
          description: Unique identifier of target resource
          type: string
          format: uri
          examples:
            - urn:x-org:resourceType:0001
        rt:
          description: Semantic type of target resource (RFC 6690)
          type: string
          format: uri
          examples:
            - http://www.example.org/uri/of/concept
        if:
          description: Interface used to access target resource (RFC 6690)
          type: string
          format: uri
          examples:
            - http://www.opengis.net/spec/spec-id/version
    links:
      $schema: http://json-schema.org/draft-07/schema#
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/link-2'
    feature:
      $schema: http://json-schema.org/draft-07/schema#
      allOf:
        - $ref: '#/components/schemas/Feature'
        - type: object
          properties:
            id:
              description: Local ID of the feature
              minLength: 1
            geometry:
              description: Geometry of the feature
            bbox:
              description: Optional bounding box for the feature
            properties:
              description: Feature properties
              type: object
              required:
                - featureType
                - uid
                - name
              properties:
                featureType:
                  type: string
                  format: uri
                uid:
                  description: Globally unique identifier of the feature
                  type: string
                  format: uri
                name:
                  description: Human readable name of the feature
                  type: string
                  minLength: 1
                description:
                  description: Human readable description of the feature
                  type: string
                  minLength: 1
            links:
              description: Links to related resources
              $ref: '#/components/schemas/links'
    idListSchema:
      oneOf:
        - type: array
          title: Local IDs
          minItems: 1
          items:
            type: string
            minLength: 1
            maxLength: 50
        - type: array
          title: Unique IDs
          minItems: 1
          items:
            type: uri
    timeInstant:
      $schema: http://json-schema.org/draft-07/schema#
      title: Time Instant
      type: string
      format: date-time
    timeInstantOrNow:
      $schema: http://json-schema.org/draft-07/schema#
      title: Time Instant
      oneOf:
        - $ref: '#/components/schemas/timeInstant'
        - type: string
          const: now
    timePeriod:
      $schema: http://json-schema.org/draft-07/schema#
      title: Time Period
      type: array
      minItems: 2
      maxItems: 2
      items:
        $ref: '#/components/schemas/timeInstantOrNow'
    system:
      $schema: http://json-schema.org/draft-07/schema#
      allOf:
        - $ref: '#/components/schemas/feature'
        - properties:
            properties:
              properties:
                featureType:
                  type: string
                  enum:
                    - http://www.w3.org/ns/sosa/Sensor
                    - http://www.w3.org/ns/sosa/Actuator
                    - http://www.w3.org/ns/sosa/Platform
                    - http://www.w3.org/ns/sosa/Sampler
                    - http://www.w3.org/ns/ssn/System
                assetType:
                  description: Type of asset represented by this system.
                  type: string
                  enum:
                    - http://www.opengis.net/def/x-OGC/TBD/Equipment
                    - http://www.opengis.net/def/x-OGC/TBD/Human
                    - http://www.opengis.net/def/x-OGC/TBD/Simulation
                    - http://www.opengis.net/def/x-OGC/TBD/Mixed
                validTime:
                  description: Time period during which the system description is valid.
                  $ref: '#/components/schemas/timePeriod'
                procedure@link:
                  description: Link to the procedure implemented by this system.
                  $ref: '#/components/schemas/link-2'
    AbstractSWE:
      $schema: http://json-schema.org/draft-07/schema#
      description: Base substitution groups for all SWE Common objects other than value objects
      type: object
      properties:
        id:
          description: The ID of the object, referenceable using a URI fragment
          type: string
          minLength: 1
    AbstractSweIdentifiable:
      $schema: http://json-schema.org/draft-07/schema#
      description: Base substitution groups for all SWE Common objects with identification metadata
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSWE'
        - properties:
            label:
              description: Human readable label for the object
              type: string
              minLength: 1
            description:
              description: Human readable description of the object
              type: string
              minLength: 1
    AbstractDataComponent:
      $schema: http://json-schema.org/draft-07/schema#
      description: Abstract base class for all data components
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSweIdentifiable'
        - properties:
            type:
              type: string
            updatable:
              description: Specifies if the value of a data component can be updated externally (i.e. is variable)
              type: boolean
              default: false
            optional:
              description: Specifies if the data for this component can be omitted in the datastream
              type: boolean
              default: false
            definition:
              description: The definition of the property whose value is provided by this component (semantic link)
              type: string
              format: uri
    AssociationAttributeGroup:
      type: object
      properties:
        href:
          type: string
          format: uri-reference
        role:
          type: string
          format: uri
        arcrole:
          type: string
          format: uri
        title:
          type: string
          minLength: 1
      required:
        - href
    AbstractSimpleComponent:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataComponent'
        - properties:
            referenceFrame:
              description: Frame of reference (usually temporal or spatial) with respect to which the value of the component is expressed. A reference frame anchors a value to a real world datum.
              type: string
              format: uri-reference
            axisID:
              description: Specifies the reference axis (refer to CRS axisID). The reference frame URI should also be specified unless it is inherited from parent Vector
              type: string
              minLength: 1
            quality:
              description: Provides an indication of the reliability of the component value in the form of a decimal number (e.g. relative accuracy), a range (e.g. bidirectional tolerance), a categorical value (e.g. good, bad) or plain textual statement
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/AssociationAttributeGroup'
                  - oneOf:
                      - $ref: '#/components/schemas/Quantity'
                      - $ref: '#/components/schemas/QuantityRange'
                      - $ref: '#/components/schemas/Category'
                      - $ref: '#/components/schemas/Text'
            nilValues:
              description: Defines reserved values with special meaning (e.g. missing, out-of-range, etc.)
            constraint: {}
            value:
              description: Inline value(s) for the component. This property is optional to enable structure to act as a schema for values provided separately (e.g. in a datastream)
    UnitReference:
      type: object
      properties:
        label:
          type: string
          minLength: 1
      oneOf:
        - title: UCUM Code
          properties:
            code:
              type: string
              minLength: 1
          required:
            - code
        - title: URI
          properties:
            href:
              type: string
              format: uri
          required:
            - href
      unevaluatedProperties: false
    NumberOrSpecial:
      oneOf:
        - title: Number
          type: number
        - title: Special Value
          type: string
          enum:
            - NaN
            - Infinity
            - +Infinity
            - '-Infinity'
    AllowedValues:
      description: Defines the permitted values for the component as an enumerated list and/or a list of inclusive ranges
      type: object
      properties:
        values:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/NumberOrSpecial'
        intervals:
          type: array
          minItems: 1
          items:
            type: array
            minItems: 2
            maxItems: 2
            items:
              $ref: '#/components/schemas/NumberOrSpecial'
        significantFigures:
          type: integer
          minimum: 1
          maximum: 40
      anyOf:
        - title: Enum Values
          required:
            - values
        - title: Intervals
          required:
            - intervals
      additionalProperties: false
    NilValuesNumber:
      type: array
      minItems: 1
      items:
        type: object
        properties:
          reason:
            description: The reason for using the reserved value
            type: string
            format: uri
          value:
            description: The reserved value itself
            $ref: '#/components/schemas/NumberOrSpecial'
        required:
          - reason
          - value
        additionalProperties: false
    Quantity:
      $schema: http://json-schema.org/draft-07/schema#
      description: Scalar component with decimal representation and a unit of measure used to store value of a continuous quantity
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSimpleComponent'
        - properties:
            type:
              const: Quantity
            uom:
              description: Unit of measure used to express the value of this data component
              $ref: '#/components/schemas/UnitReference'
            constraint:
              $ref: '#/components/schemas/AllowedValues'
            nilValues:
              $ref: '#/components/schemas/NilValuesNumber'
            value:
              $ref: '#/components/schemas/NumberOrSpecial'
          required:
            - type
            - definition
            - label
            - uom
    QuantityRange:
      $schema: http://json-schema.org/draft-07/schema#
      description: Decimal pair for specifying a quantity range with a unit of measure
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSimpleComponent'
        - properties:
            type:
              const: QuantityRange
            uom:
              description: Unit of measure used to express the value of this data component
              $ref: '#/components/schemas/UnitReference'
            constraint:
              $ref: '#/components/schemas/AllowedValues'
            nilValues:
              $ref: '#/components/schemas/NilValuesNumber'
            value:
              type: array
              minItems: 2
              maxItems: 2
              items:
                $ref: '#/components/schemas/NumberOrSpecial'
          required:
            - type
            - definition
            - label
            - uom
    AllowedTokens:
      description: Defines permitted values for the component, as an enumerated list of tokens or a regular expression pattern
      type: object
      oneOf:
        - title: Enum Values
          properties:
            values:
              type: array
              minItems: 1
              items:
                type: string
                minLength: 1
          required:
            - values
        - title: Regex Pattern
          properties:
            pattern:
              type: string
              format: regex
              minLength: 1
          required:
            - pattern
      unevaluatedProperties: false
    NilValuesText:
      type: array
      minItems: 1
      items:
        type: object
        properties:
          reason:
            description: The reason for using the reserved value
            type: string
            format: uri
          value:
            description: The reserved value itself
            type: string
        required:
          - reason
          - value
        additionalProperties: false
    Category:
      $schema: http://json-schema.org/draft-07/schema#
      description: Scalar component used to represent a categorical value as a simple token identifying a term in a code space
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSimpleComponent'
        - properties:
            type:
              const: Category
            codeSpace:
              description: Name of the dictionary where the possible values for this component are listed and defined
              type: string
              format: uri
            constraint:
              $ref: '#/components/schemas/AllowedTokens'
            nilValues:
              $ref: '#/components/schemas/NilValuesText'
            value:
              type: string
          required:
            - type
            - definition
            - label
    Text:
      $schema: http://json-schema.org/draft-07/schema#
      description: Free text component used to store comments or any other type of textual statement
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSimpleComponent'
        - properties:
            type:
              const: Text
            constraint:
              $ref: '#/components/schemas/AllowedTokens'
            nilValues:
              $ref: '#/components/schemas/NilValuesText'
            value:
              type: string
          required:
            - type
            - definition
            - label
    Boolean:
      $schema: http://json-schema.org/draft-07/schema#
      description: 'Scalar component used to express truth: True or False, 0 or 1'
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSimpleComponent'
        - properties:
            type:
              const: Boolean
            value:
              type: boolean
          required:
            - type
            - definition
            - label
    NilValuesInteger:
      type: array
      minItems: 1
      items:
        type: object
        properties:
          reason:
            description: The reason for using the reserved value
            type: string
            format: uri
          value:
            description: The reserved value itself
            type: integer
        required:
          - reason
          - value
        additionalProperties: false
    Count:
      $schema: http://json-schema.org/draft-07/schema#
      description: Scalar component with integer representation used for a discrete counting value
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSimpleComponent'
        - properties:
            type:
              const: Count
            constraint:
              $ref: '#/components/schemas/AllowedValues'
            nilValues:
              $ref: '#/components/schemas/NilValuesInteger'
            value:
              type: integer
          required:
            - type
            - definition
            - label
    DateTimeNumberOrSpecial:
      oneOf:
        - title: Date/Time
          type: string
          format: date-time
        - $ref: '#/components/schemas/NumberOrSpecial'
    AllowedTimes:
      description: Defines the permitted values for the component, as a time range or an enumerated list of time values
      type: object
      properties:
        values:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/DateTimeNumberOrSpecial'
        intervals:
          type: array
          items:
            type: array
            minItems: 2
            maxItems: 2
            items:
              $ref: '#/components/schemas/DateTimeNumberOrSpecial'
        significantFigures:
          type: integer
          minimum: 1
          maximum: 40
      anyOf:
        - title: Enum Values
          required:
            - values
        - title: Intervals
          required:
            - intervals
      additionalProperties: false
    NilValuesTime:
      type: array
      minItems: 1
      items:
        type: object
        properties:
          reason:
            description: The reason for using the reserved value
            type: string
            format: uri
          value:
            description: The reserved value itself
            $ref: '#/components/schemas/DateTimeNumberOrSpecial'
        required:
          - reason
          - value
        additionalProperties: false
    Time:
      $schema: http://json-schema.org/draft-07/schema#
      description: Scalar component used to represent a time quantity either as ISO 8601 (e.g. 2004-04-18T12:03:04.6Z) or as a duration relative to a time of reference
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSimpleComponent'
        - properties:
            type:
              const: Time
            referenceTime:
              description: Specifies the origin of the temporal reference frame as an ISO8601 date (used to specify time after an epoch that is to say in a custom frame)
              type: string
              format: date-time
            localFrame:
              description: Temporal frame of reference whose origin is located by the value of this component
              type: string
              format: uri
            uom:
              description: Temporal unit of measure used to express the value of this data component
              $ref: '#/components/schemas/UnitReference'
            constraint:
              $ref: '#/components/schemas/AllowedTimes'
            nilValues:
              $ref: '#/components/schemas/NilValuesTime'
            value:
              $ref: '#/components/schemas/DateTimeNumberOrSpecial'
          required:
            - type
            - definition
            - label
            - uom
    AnyScalarComponent:
      oneOf:
        - $ref: '#/components/schemas/Boolean'
        - $ref: '#/components/schemas/Count'
        - $ref: '#/components/schemas/Quantity'
        - $ref: '#/components/schemas/Time'
        - $ref: '#/components/schemas/Category'
        - $ref: '#/components/schemas/Text'
    CountRange:
      $schema: http://json-schema.org/draft-07/schema#
      description: Integer pair used for specifying a count range
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSimpleComponent'
        - properties:
            type:
              const: CountRange
            constraint:
              $ref: '#/components/schemas/AllowedValues'
            nilValues:
              $ref: '#/components/schemas/NilValuesText'
            value:
              type: array
              minItems: 2
              maxItems: 2
              items:
                type: integer
          required:
            - type
            - definition
            - label
    TimeRange:
      $schema: http://json-schema.org/draft-07/schema#
      description: Time value pair for specifying a time range (can be a decimal or ISO 8601)
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSimpleComponent'
        - properties:
            type:
              const: TimeRange
            referenceTime:
              description: Specifies the origin of the temporal reference frame as an ISO8601 date (used to specify time after an epoch that is to say in a custom frame)
              type: string
              format: date-time
            localFrame:
              description: Temporal frame of reference whose origin is located by the value of this component
              type: string
              format: uri
            uom:
              description: Temporal unit of measure used to express the value of this data component
              $ref: '#/components/schemas/UnitReference'
            constraint:
              $ref: '#/components/schemas/AllowedTimes'
            nilValues:
              $ref: '#/components/schemas/NilValuesTime'
            value:
              type: array
              minItems: 2
              maxItems: 2
              items:
                $ref: '#/components/schemas/DateTimeNumberOrSpecial'
          required:
            - type
            - definition
            - label
            - uom
    CategoryRange:
      $schema: http://json-schema.org/draft-07/schema#
      description: Pair of categorical values used to specify a range in an ordinal reference system (specified by the code space)
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSimpleComponent'
        - properties:
            type:
              const: CategoryRange
            codeSpace:
              description: Name of the dictionary defining an ordered set of values with respect to which the range is expressed (ordinal reference system)
              type: string
              format: uri
            constraint:
              $ref: '#/components/schemas/AllowedTokens'
            nilValues:
              $ref: '#/components/schemas/NilValuesText'
            value:
              type: array
              minItems: 2
              maxItems: 2
              items:
                type: string
          required:
            - type
            - definition
            - label
    AnySimpleComponent:
      oneOf:
        - $ref: '#/components/schemas/AnyScalarComponent'
        - $ref: '#/components/schemas/CountRange'
        - $ref: '#/components/schemas/QuantityRange'
        - $ref: '#/components/schemas/TimeRange'
        - $ref: '#/components/schemas/CategoryRange'
    NameToken:
      type: string
      minLength: 1
      regex: ^[A-Za-z][A-Za-z0-9_\-]*$
    SoftNamedProperty:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/NameToken'
      required:
        - name
    AnyComponent:
      oneOf:
        - $ref: '#/components/schemas/AnySimpleComponent'
        - $ref: '#/components/schemas/DataRecord'
        - $ref: '#/components/schemas/Vector'
        - $ref: '#/components/schemas/DataArray'
        - $ref: '#/components/schemas/Matrix'
        - $ref: '#/components/schemas/DataChoice'
        - $ref: '#/components/schemas/Geometry-2'
    DataRecord:
      $schema: http://json-schema.org/draft-07/schema#
      description: Implementation of ISO-11404 Record datatype. This allows grouping (sequence) of data components which can themselves be simple types, records, arrays or choices
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataComponent'
        - properties:
            type:
              const: DataRecord
            fields:
              description: Definition of the record fields. Fields can be scalars or can themself be aggregates such as records, vectors, arrays, or choices.
              type: array
              minItems: 1
              items:
                allOf:
                  - $ref: '#/components/schemas/SoftNamedProperty'
                  - oneOf:
                      - $ref: '#/components/schemas/AssociationAttributeGroup'
                      - $ref: '#/components/schemas/AnyComponent'
          required:
            - type
            - fields
    Vector:
      $schema: http://json-schema.org/draft-07/schema#
      description: Implementation of a mathematical vector composed of a list of scalar coordinates expressed in the mandatory reference frame.
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataComponent'
        - properties:
            type:
              const: Vector
            referenceFrame:
              description: Frame of reference (usually spatial) with respect to which the coordinates of this vector are expressed. A reference frame anchors a vector value to a real world datum.
              type: string
              format: uri-reference
            localFrame:
              description: Frame of reference whose origin is located by the coordinates of this vector
              type: string
              format: uri-reference
            coordinates:
              description: Definition of the coordinate provided as a data component with a numerical representation
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/SoftNamedProperty'
                  - oneOf:
                      - $ref: '#/components/schemas/Count'
                      - $ref: '#/components/schemas/Quantity'
                      - $ref: '#/components/schemas/Time'
          required:
            - type
            - definition
            - referenceFrame
            - label
            - coordinates
    ElementCount:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSimpleComponent'
        - properties:
            constraint:
              $ref: '#/components/schemas/AllowedValues'
            value:
              description: Value is optional, to enable structure to act as a schema for values provided using other encodings
              type: integer
    AbstractEncoding:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSWE'
        - properties: {}
    Component:
      description: Binary encoding parameters used for encoding a single data component
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSWE'
        - properties:
            type:
              const: Component
            encryption:
              description: Name of the encryption method used to encrypt the value of this field
              type: string
              format: uri
            significantBits:
              description: Number of significant bits actually used for a binary encoded numerical value (all remaining bits shall be set to 0)
              type: integer
            bitLength:
              type: integer
            byteLength:
              description: Byte length of this field when a custom data type is used
              type: integer
            dataType:
              description: Binary data type used to encode the value(s) of the referenced data component
              type: string
              format: uri
            ref:
              description: Reference to the data component that these binary encoding settings apply to
              type: string
          required:
            - type
            - dataType
            - ref
    Block:
      description: Binary encoding parameters used to encode a block of values at once. This is used for encrypting or compressing a complete array of values for instance
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSWE'
        - properties:
            type:
              const: Block
            compression:
              description: Name of the compression method used to encrypt the block of values described by the referenced data component
              type: string
              format: uri
            encryption:
              description: Name of the encryption method used to encrypt the block of values described by the referenced data component
              type: string
              format: uri
            paddingBytes-after:
              description: Number of padding bytes present in the stream after this binary block
              type: integer
            paddingBytes-before:
              description: Number of padding bytes present in the stream before this binary block
              type: integer
            byteLength:
              description: Length in byte of this binary block (if known in advance)
              type: integer
            ref:
              description: Reference to the aggregate data component that this binary block encoding settings apply to
              type: string
          required:
            - type
            - ref
    BinaryEncoding:
      description: Parameters of the binary encoding method
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractEncoding'
        - properties:
            type:
              const: BinaryEncoding
            byteOrder:
              description: Byte order convention used to encode this binary data (big endian = most significant byte first, MSB or little endian = least significant byte first, LSB)
              type: string
              enum:
                - bigEndian
                - littleEndian
            byteEncoding:
              description: Byte encoding method used to encode the binary data (raw or base 64)
              type: string
              enum:
                - base64
                - raw
            byteLength:
              description: Total length in bytes of the binary stream (if known in advance)
              type: integer
            members:
              description: Each member contains detailed parameters for encoding a scalar value or a block of values
              type: array
              minItems: 1
              items:
                oneOf:
                  - $ref: '#/components/schemas/Component'
                  - $ref: '#/components/schemas/Block'
          required:
            - type
            - byteOrder
            - byteEncoding
            - members
    TextEncoding:
      description: Parameters of the text encoding method
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractEncoding'
        - properties:
            type:
              const: TextEncoding
            collapseWhiteSpaces:
              description: Indicates whether white spaces (i.e. space, tab, CR, LF) should be collapsed with separators when parsing the data stream
              type: boolean
            decimalSeparator:
              description: Character used as the decimal separator
              type: string
              minLength: 1
            tokenSeparator:
              description: Character sequence used as the token separator (i.e. between two successive values)
              type: string
              minLength: 1
            blockSeparator:
              description: Character sequence used as the block separator (i.e. between two successive blocks in the data set. The end of a block is reached once all values from the data tree have been encoded once)
              type: string
              minLength: 1
          required:
            - type
            - tokenSeparator
            - blockSeparator
    XMLEncoding:
      description: Parameters of the XML encoding method
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractEncoding'
        - properties:
            type:
              const: XMLEncoding
            namespace:
              type: string
              format: uri
          required:
            - type
    JSONEncoding:
      description: Parameters of the JSON encoding method
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractEncoding'
        - properties:
            type:
              const: JSONEncoding
            vectorAsArrays:
              description: Indicates whether vectors are encoded as JSON arrays (if true) or JSON objects (if false)
              type: boolean
          required:
            - type
    EncodedValues:
      oneOf:
        - type: array
        - $ref: '#/components/schemas/AssociationAttributeGroup'
    AbstractArray:
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataComponent'
        - properties:
            elementCount:
              description: Specifies the size of the array (i.e. the number of elements of the defined type it contains)
              oneOf:
                - $ref: '#/components/schemas/AssociationAttributeGroup'
                - $ref: '#/components/schemas/ElementCount'
            elementType:
              description: Defines the structure of the element that will be repeated in the array
              allOf:
                - $ref: '#/components/schemas/SoftNamedProperty'
                - oneOf:
                    - $ref: '#/components/schemas/AssociationAttributeGroup'
                    - $ref: '#/components/schemas/AnyComponent'
            encoding:
              description: Specifies the type of method used to encode the array values
              oneOf:
                - $ref: '#/components/schemas/BinaryEncoding'
                - $ref: '#/components/schemas/TextEncoding'
                - $ref: '#/components/schemas/XMLEncoding'
                - $ref: '#/components/schemas/JSONEncoding'
            values:
              description: If present, contains an encoded block of the values contained in the array. Values are optional so that the array definition can be used a as a schema for values provided separately
              $ref: '#/components/schemas/EncodedValues'
    DataArray:
      $schema: http://json-schema.org/draft-07/schema#
      description: Implementation of ISO-11404 Array datatype. This defines an array of identical data components with a elementCount. Values are given as a block and can be encoded in different ways
      allOf:
        - $ref: '#/components/schemas/AbstractArray'
        - properties:
            type:
              const: DataArray
          required:
            - type
            - elementType
      definitions:
        AbstractArray:
          type: object
          allOf:
            - $ref: '#/components/schemas/AbstractDataComponent'
            - properties:
                elementCount:
                  description: Specifies the size of the array (i.e. the number of elements of the defined type it contains)
                  oneOf:
                    - $ref: '#/components/schemas/AssociationAttributeGroup'
                    - $ref: '#/components/schemas/ElementCount'
                elementType:
                  description: Defines the structure of the element that will be repeated in the array
                  allOf:
                    - $ref: '#/components/schemas/SoftNamedProperty'
                    - oneOf:
                        - $ref: '#/components/schemas/AssociationAttributeGroup'
                        - $ref: '#/components/schemas/AnyComponent'
                encoding:
                  description: Specifies the type of method used to encode the array values
                  oneOf:
                    - $ref: '#/components/schemas/BinaryEncoding'
                    - $ref: '#/components/schemas/TextEncoding'
                    - $ref: '#/components/schemas/XMLEncoding'
                    - $ref: '#/components/schemas/JSONEncoding'
                values:
                  description: If present, contains an encoded block of the values contained in the array. Values are optional so that the array definition can be used a as a schema for values provided separately
                  $ref: '#/components/schemas/EncodedValues'
    Matrix:
      $schema: http://json-schema.org/draft-07/schema#
      description: Implementation of ISO-11404 Array datatype. This defines an array of identical data components with a elementCount. Values are given as a block and can be encoded in different ways
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractArray'
        - properties:
            type:
              const: Matrix
            referenceFrame:
              description: Frame of reference (usually spatial) with respect to which the coordinates of this matrix are expressed
              type: string
              format: uri-reference
            localFrame:
              description: Frame of reference whose position and orientation are provided by the transformation defined by this matrix
              type: string
              format: uri-reference
          required:
            - type
            - elementType
    DataChoice:
      $schema: http://json-schema.org/draft-07/schema#
      description: Implementation of a choice of two or more Data Components (also called disjoint union)
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataComponent'
        - properties:
            type:
              const: DataChoice
            choiceValue:
              description: This category component marks the data stream element that will indicate the actual choice made. Possible choices are listed in the Category constraint section as an enumeration and should map to item names.
              $ref: '#/components/schemas/Category'
            items:
              description: Definition of the choice items. Items can be of any component types
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/SoftNamedProperty'
                  - oneOf:
                      - $ref: '#/components/schemas/AssociationAttributeGroup'
                      - $ref: '#/components/schemas/AnyComponent'
          required:
            - type
            - items
    Geometry:
      $schema: http://json-schema.org/draft-07/schema#
      $id: https://geojson.org/schema/Geometry.json
      title: GeoJSON Geometry
      oneOf:
        - title: GeoJSON Point
          type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              enum:
                - Point
            coordinates:
              type: array
              minItems: 2
              items:
                type: number
            bbox:
              type: array
              minItems: 4
              items:
                type: number
        - title: GeoJSON LineString
          type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              enum:
                - LineString
            coordinates:
              type: array
              minItems: 2
              items:
                type: array
                minItems: 2
                items:
                  type: number
            bbox:
              type: array
              minItems: 4
              items:
                type: number
        - title: GeoJSON Polygon
          type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              enum:
                - Polygon
            coordinates:
              type: array
              items:
                type: array
                minItems: 4
                items:
                  type: array
                  minItems: 2
                  items:
                    type: number
            bbox:
              type: array
              minItems: 4
              items:
                type: number
        - title: GeoJSON MultiPoint
          type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              enum:
                - MultiPoint
            coordinates:
              type: array
              items:
                type: array
                minItems: 2
                items:
                  type: number
            bbox:
              type: array
              minItems: 4
              items:
                type: number
        - title: GeoJSON MultiLineString
          type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              enum:
                - MultiLineString
            coordinates:
              type: array
              items:
                type: array
                minItems: 2
                items:
                  type: array
                  minItems: 2
                  items:
                    type: number
            bbox:
              type: array
              minItems: 4
              items:
                type: number
        - title: GeoJSON MultiPolygon
          type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              enum:
                - MultiPolygon
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  minItems: 4
                  items:
                    type: array
                    minItems: 2
                    items:
                      type: number
            bbox:
              type: array
              minItems: 4
              items:
                type: number
    Geometry-2:
      $schema: http://json-schema.org/draft-07/schema#
      title: Geometry
      description: Implementation of ISO-19107 geometry datatype. This allows embedding a geometry in a larger schema
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractDataComponent'
        - properties:
            type:
              const: Geometry
            constraint:
              type: object
              properties:
                geomTypes:
                  type: array
                  minLength: 1
                  items:
                    type: string
                    enum:
                      - Point
                      - MultiPoint
                      - LineString
                      - MultiLineString
                      - Polygon
                      - MultiPolygon
              additionalProperties: false
            nilValues:
              $ref: '#/components/schemas/NilValuesText'
            srs:
              description: Coordinate reference system with respect to which the coordinates of this geometry are expressed
              type: string
              format: uri
            value:
              $ref: '#/components/schemas/Geometry'
          required:
            - type
            - srs
            - definition
            - label
    definitions-AnyComponent:
      allOf:
        - properties:
            name:
              type: string
          required:
            - name
        - $ref: '#/components/schemas/AnyComponent'
    ObservableProperty:
      description: A physical property that can be observed and possibly measured (e.g. temperature, color, position). An ObservableProperty has unambiguous definition, but does not have units of measure.
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSweIdentifiable'
        - properties:
            type:
              const: ObservableProperty
            definition:
              type: string
              format: uri
          required:
            - type
            - definition
    ComponentOrObsProp:
      oneOf:
        - title: DataComponent
          $ref: '#/components/schemas/definitions-AnyComponent'
        - title: ObservableProperty
          $ref: '#/components/schemas/ObservableProperty'
    AnyProperty:
      oneOf:
        - $ref: '#/components/schemas/AnySimpleComponent'
        - $ref: '#/components/schemas/Vector'
        - $ref: '#/components/schemas/DataArray'
        - $ref: '#/components/schemas/Matrix'
    AbstractFeature:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      properties:
        type:
          description: Type of object
          type: string
        id:
          description: Local ID of the feature (e.g. locally unique on a server)
          type: string
          minLength: 1
        description:
          description: A textual description of the feature
          type: string
          minLength: 1
        uniqueId:
          description: URI serving as the globally unique identifier of the feature (typically a URN)
          type: string
          format: uri
        name:
          description: A human readable label for the feature
          type: string
          minLength: 1
      required:
        - type
        - uniqueId
        - name
    Term:
      type: object
      properties:
        definition:
          description: Type of identifier/classifier (semantic link)
          type: string
          format: uri
        label:
          description: Human readable label for this identifier/classifier
          type: string
          minLength: 1
        codeSpace:
          description: URI of codespace defining the possible values for this identifier/classifier
          type: string
          format: uri
        value:
          description: Actual identifier/classifier value
          type: string
          minLength: 1
      required:
        - label
        - value
      unevaluatedProperties: false
    LegalConstraint:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
    CharacteristicList:
      allOf:
        - $ref: '#/components/schemas/AbstractSweIdentifiable'
        - type: object
          properties:
            definition:
              description: Semantic link to the definition of this group of capabilities
              type: string
              format: uri
            conditions:
              description: The conditions under which the characteristics apply
              type: array
              items:
                $ref: '#/components/schemas/AnySimpleComponent'
            characteristics:
              description: The list of characteristics in this group
              type: array
              items:
                $ref: '#/components/schemas/AnyProperty'
          required:
            - characteristics
      unevaluatedProperties: false
    CapabilityList:
      allOf:
        - $ref: '#/components/schemas/AbstractSweIdentifiable'
        - description: A group of capabilities.
          type: object
          properties:
            definition:
              description: Semantic link to the definition of this group of capabilities
              type: string
              format: uri
            conditions:
              description: The conditions under which the capabilities apply
              type: array
              items:
                $ref: '#/components/schemas/AnySimpleComponent'
            capabilities:
              description: The list of capabilities in this group
              type: array
              items:
                $ref: '#/components/schemas/AnyProperty'
          required:
            - capabilities
      unevaluatedProperties: false
    Phone:
      type: object
      properties:
        voice:
          type: string
        facsimile:
          type: string
      unevaluatedProperties: false
    Address:
      type: object
      properties:
        deliveryPoint:
          type: string
        city:
          type: string
        administrativeArea:
          type: string
        postalCode:
          type: string
        country:
          type: string
        electronicMailAddress:
          type: string
          format: email
      unevaluatedProperties: false
    Contact:
      type: object
      properties:
        phone:
          $ref: '#/components/schemas/Phone'
        address:
          $ref: '#/components/schemas/Address'
        onlineResource:
          type: string
        hoursOfService:
          type: string
        contactInstructions:
          type: string
      unevaluatedProperties: false
    ResponsibleParty:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      properties:
        individualName:
          type: string
        organisationName:
          type: string
        positionName:
          type: string
        contactInfo:
          $ref: '#/components/schemas/Contact'
        role:
          type: string
          format: uri
      unevaluatedProperties: false
      required:
        - role
      oneOf:
        - title: Individual
          required:
            - individualName
        - title: Organization
          required:
            - organisationName
      definitions:
        Contact:
          type: object
          properties:
            phone:
              $ref: '#/components/schemas/Phone'
            address:
              $ref: '#/components/schemas/Address'
            onlineResource:
              type: string
            hoursOfService:
              type: string
            contactInstructions:
              type: string
          unevaluatedProperties: false
        Phone:
          type: object
          properties:
            voice:
              type: string
            facsimile:
              type: string
          unevaluatedProperties: false
        Address:
          type: object
          properties:
            deliveryPoint:
              type: string
            city:
              type: string
            administrativeArea:
              type: string
            postalCode:
              type: string
            country:
              type: string
            electronicMailAddress:
              type: string
              format: email
          unevaluatedProperties: false
    Document:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      properties:
        definition:
          description: Type of document (semantic link)
          type: string
          format: uri
        label:
          description: Name of the document
          type: string
        description:
          description: Human readable description of the document
          type: string
        link:
          description: URI of the document (Favor a URL if the document is directly accessible online)
          $ref: '#/components/schemas/link-2'
      unevaluatedProperties: false
      required:
        - label
        - link
    Settings:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
    Event:
      $schema: http://json-schema.org/draft-07/schema#
      description: A time tagged event with description and relevant property values.
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSweIdentifiable'
        - properties:
            definition:
              description: Type of event (semantic link)
              type: string
              format: uri
            identifiers:
              description: Additional identifiers for the event, useful for discovery.
              type: array
              items:
                $ref: '#/components/schemas/Term'
            classifiers:
              description: Additional classifiers for the event, useful for discovery.
              type: array
              items:
                $ref: '#/components/schemas/Term'
            contacts:
              description: The list of contacts relevant to this event
              type: array
              items:
                $ref: '#/components/schemas/ResponsibleParty'
            documentation:
              description: Additional documentation relevant to this event
              type: array
              items:
                $ref: '#/components/schemas/Document'
            time:
              description: Time of the event
              $ref: '#/components/schemas/timeInstant'
            properties:
              description: A list of additional properties of interest to the event (e.g. calibration values, condition category, error codes, etc).
              type: array
              items:
                $ref: '#/components/schemas/AnyProperty'
            configuration:
              description: Configuration settings adjusted during the event.
              $ref: '#/components/schemas/Settings'
          required:
            - label
            - definition
            - time
    DescribedObject:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractFeature'
        - properties:
            lang:
              description: Language of this document
              type: string
            definition:
              description: Type of the object (semantic link)
              type: string
              format: uri
            keywords:
              description: Short keywords describing the context of this document to aid in discovery.
              type: array
              items:
                type: string
                minLength: 1
            identifiers:
              description: Additional identifiers for the asset, useful for discovery (e.g. short name, mission id, model number, serial number, etc.).
              type: array
              items:
                $ref: '#/components/schemas/Term'
            classifiers:
              description: Classifiers for the asset, useful for discovery (e.g. process type, sensor type, intended application, etc.).
              type: array
              items:
                $ref: '#/components/schemas/Term'
            validTime:
              $ref: '#/components/schemas/timePeriod'
            securityConstraints:
              description: Overall security tagging of process description; Individual tagging of properties can be done using extension properties.
              type: array
              items:
                type: object
                additionalProperties: true
            legalConstraints:
              description: Legal constraints applied to this description (e.g. copyrights, legal use, etc.)
              type: array
              items:
                $ref: '#/components/schemas/LegalConstraint'
            characteristics:
              description: Groups of characteristics applicable to this asset under various conditions
              type: array
              items:
                $ref: '#/components/schemas/CharacteristicList'
            capabilities:
              description: Groups of capabilities applicable to this asset under various conditions
              type: array
              items:
                $ref: '#/components/schemas/CapabilityList'
            contacts:
              description: The list of contacts related to this asset
              type: array
              items:
                $ref: '#/components/schemas/ResponsibleParty'
            documentation:
              description: Additional documentation about the asset
              type: array
              items:
                $ref: '#/components/schemas/Document'
            history:
              description: The list of events related to this asset
              type: array
              items:
                $ref: '#/components/schemas/Event'
      definitions:
        CharacteristicList:
          allOf:
            - $ref: '#/components/schemas/AbstractSweIdentifiable'
            - type: object
              properties:
                definition:
                  description: Semantic link to the definition of this group of capabilities
                  type: string
                  format: uri
                conditions:
                  description: The conditions under which the characteristics apply
                  type: array
                  items:
                    $ref: '#/components/schemas/AnySimpleComponent'
                characteristics:
                  description: The list of characteristics in this group
                  type: array
                  items:
                    $ref: '#/components/schemas/AnyProperty'
              required:
                - characteristics
          unevaluatedProperties: false
        CapabilityList:
          allOf:
            - $ref: '#/components/schemas/AbstractSweIdentifiable'
            - description: A group of capabilities.
              type: object
              properties:
                definition:
                  description: Semantic link to the definition of this group of capabilities
                  type: string
                  format: uri
                conditions:
                  description: The conditions under which the capabilities apply
                  type: array
                  items:
                    $ref: '#/components/schemas/AnySimpleComponent'
                capabilities:
                  description: The list of capabilities in this group
                  type: array
                  items:
                    $ref: '#/components/schemas/AnyProperty'
              required:
                - capabilities
          unevaluatedProperties: false
    FeatureList:
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/link-2'
    InputList:
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/ComponentOrObsProp'
    OutputList:
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/ComponentOrObsProp'
    ParameterList:
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/definitions-AnyComponent'
    ModeChoice: {}
    AbstractProcess:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      allOf:
        - $ref: '#/components/schemas/DescribedObject'
        - properties:
            definition:
              description: The semantic type of the process as a reference to a concept in an online ontology or dictionary. The value of the property must be a resolvable URI.
              type: string
              format: uri
            typeOf:
              description: A reference to a base process from which this process inherits properties and constraints (e.g. original equipment manufacturer's model description, generic equation, etc.).
              $ref: '#/components/schemas/link-2'
            configuration:
              description: Value settings that further constrain the properties of the base process.
              $ref: '#/components/schemas/Settings'
            featuresOfInterest:
              description: A collection of sampling features or domain features relevant to the process (e.g. the Gulf of Mexico, the White House, the Atmosphere, a vehicle, etc.).
              $ref: '#/components/schemas/FeatureList'
            inputs:
              description: The list of process or system inputs.
              $ref: '#/components/schemas/InputList'
            outputs:
              description: The list of process or system outputs.
              $ref: '#/components/schemas/OutputList'
            parameters:
              description: The list of process or system parameters.
              $ref: '#/components/schemas/ParameterList'
            modes:
              description: A collection of parameters that can be set at once through the selection of a particular predefined mode.
              type: array
              items:
                $ref: '#/components/schemas/ModeChoice'
      definitions:
        FeatureList:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/link-2'
        InputList:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ComponentOrObsProp'
        OutputList:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/ComponentOrObsProp'
        ParameterList:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/definitions-AnyComponent'
        ModeChoice: {}
        ComponentOrObsProp:
          oneOf:
            - title: DataComponent
              $ref: '#/components/schemas/definitions-AnyComponent'
            - title: ObservableProperty
              $ref: '#/components/schemas/ObservableProperty'
    ProcessMethod: {}
    SimpleProcess:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractProcess'
        - properties:
            type:
              const: SimpleProcess
            method:
              $ref: '#/components/schemas/ProcessMethod'
      definitions:
        ProcessMethod: {}
    ComponentList:
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/link-2'
    ConnectionList: {}
    AggregateProcess:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractProcess'
        - properties:
            type:
              const: AggregateProcess
            components:
              description: The list of sub-processes
              $ref: '#/components/schemas/ComponentList'
            connections:
              description: The explicit definition of data links between outputs, inputs, and parameters of the components within an aggregate process.
              $ref: '#/components/schemas/ConnectionList'
      definitions:
        ComponentList:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/link-2'
        ConnectionList: {}
    Point:
      $schema: http://json-schema.org/draft-07/schema#
      $id: https://geojson.org/schema/Point.json
      title: GeoJSON Point
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          type: array
          minItems: 2
          items:
            type: number
        bbox:
          type: array
          minItems: 4
          items:
            type: number
    SpatialFrame:
      description: A general spatial Cartesian Reference Frame where the axes and origin will be defined textually relative to a physical component.
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSweIdentifiable'
        - properties:
            origin:
              description: A textual description of the origin of the reference frame relative to the physical device (e.g. "the origin is at the point of attachment of the sensor to the platform").
              type: string
            axis:
              description: Axis with name attribute and a textual description of the relationship of the axis to the physical device; the order of the axes listed determines their relationship according to the right-handed rule (e.g. axis 1 cross axis 2 = axis 3).
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  description:
                    type: string
                required:
                  - name
                  - description
          required:
            - origin
            - axis
      unevaluatedProperties: false
    TemporalFrame:
      description: A general temporal frame such as a mission start time or timer start time. The origin should just describe context of the start of time (e.g. start of local timer).
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSweIdentifiable'
        - properties:
            origin:
              type: string
          required:
            - origin
      unevaluatedProperties: false
    Position:
      oneOf:
        - $ref: '#/components/schemas/Point'
        - $ref: '#/components/schemas/Vector'
    AbstractPhysicalProcess:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractProcess'
        - properties:
            attachedTo:
              description: References the physical component or system (e.g. platform) to which to which this component or system is attached.
              $ref: '#/components/schemas/link-2'
            localReferenceFrames:
              description: A spatial reference frame of the physical component itself; this reference frame is absolute and defines the relationship of the reference frame to the physical body of the component; position of the component relates this reference frame to some external reference frame. Note that units are specified in the position so they are not specified as part of the SpatialFrame.
              type: array
              items:
                $ref: '#/components/schemas/SpatialFrame'
            localTimeFrames:
              description: Supports local time reference frames such as "time past mission start". Note that units are handled in timePosition so they are not specified in the TemporalFrame.
              type: array
              items:
                $ref: '#/components/schemas/TemporalFrame'
            position:
              description: Provides positional information relating the component's spatial reference frame to an external spatial reference frame. Positional information can be given by location, by full body state, by a time-tagged trajectory, or by a measuring or computational process.
              $ref: '#/components/schemas/Position'
            timePosition:
              description: Provides Time positions typically reference a local time frame to an external time frame. For example, a timer-start-time might be given relative to an "absolute" GPS time.
              type: array
              items: {}
      definitions:
        SpatialFrame:
          description: A general spatial Cartesian Reference Frame where the axes and origin will be defined textually relative to a physical component.
          type: object
          allOf:
            - $ref: '#/components/schemas/AbstractSweIdentifiable'
            - properties:
                origin:
                  description: A textual description of the origin of the reference frame relative to the physical device (e.g. "the origin is at the point of attachment of the sensor to the platform").
                  type: string
                axis:
                  description: Axis with name attribute and a textual description of the relationship of the axis to the physical device; the order of the axes listed determines their relationship according to the right-handed rule (e.g. axis 1 cross axis 2 = axis 3).
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      description:
                        type: string
                    required:
                      - name
                      - description
              required:
                - origin
                - axis
          unevaluatedProperties: false
        TemporalFrame:
          description: A general temporal frame such as a mission start time or timer start time. The origin should just describe context of the start of time (e.g. start of local timer).
          type: object
          allOf:
            - $ref: '#/components/schemas/AbstractSweIdentifiable'
            - properties:
                origin:
                  type: string
              required:
                - origin
          unevaluatedProperties: false
        Position:
          oneOf:
            - $ref: '#/components/schemas/Point'
            - $ref: '#/components/schemas/Vector'
    PhysicalComponent:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractPhysicalProcess'
        - properties:
            type:
              const: PhysicalComponent
    PhysicalSystem:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractPhysicalProcess'
        - properties:
            type:
              const: PhysicalSystem
            components:
              description: The list of sub-components
              $ref: '#/components/schemas/ComponentList'
            connections:
              $ref: '#/components/schemas/ConnectionList'
      definitions:
        ComponentList:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/link-2'
        ConnectionList: {}
    system-2:
      $schema: http://json-schema.org/draft-07/schema#
      allOf:
        - oneOf:
            - $ref: '#/components/schemas/SimpleProcess'
            - $ref: '#/components/schemas/AggregateProcess'
            - $ref: '#/components/schemas/PhysicalComponent'
            - $ref: '#/components/schemas/PhysicalSystem'
        - properties:
            definition:
              enum:
                - http://www.w3.org/ns/ssn/System
                - http://www.w3.org/ns/sosa/Sensor
                - http://www.w3.org/ns/sosa/Actuator
                - http://www.w3.org/ns/sosa/Sampler
                - http://www.w3.org/ns/sosa/Platform
            links:
              description: Links to related resources
              $ref: '#/components/schemas/links'
          required:
            - definition
    procedure:
      $schema: http://json-schema.org/draft-07/schema#
      allOf:
        - $ref: '#/components/schemas/feature'
        - geometry: null
          properties:
            geometry:
              type: 'null'
            properties:
              properties:
                featureType:
                  type: string
                  enum:
                    - http://www.w3.org/ns/sosa/ObservingProcedure
                    - http://www.w3.org/ns/sosa/ActuationProcedure
                    - http://www.w3.org/ns/sosa/SamplingProcedure
                    - http://www.w3.org/ns/sosa/PreparationProcedure
                    - http://www.w3.org/ns/sosa/Procedure
    procedure-2:
      $schema: http://json-schema.org/draft-07/schema#
      allOf:
        - oneOf:
            - $ref: '#/components/schemas/SimpleProcess'
            - $ref: '#/components/schemas/AggregateProcess'
            - $ref: '#/components/schemas/PhysicalComponent'
            - $ref: '#/components/schemas/PhysicalSystem'
        - properties:
            definition:
              enum:
                - http://www.w3.org/ns/sosa/ObservingProcedure
                - http://www.w3.org/ns/sosa/ActuationProcedure
                - http://www.w3.org/ns/sosa/SamplingProcedure
                - http://www.w3.org/ns/sosa/PreparationProcedure
                - http://www.w3.org/ns/sosa/Procedure
            position:
              not: {}
            links:
              description: Links to related resources
              $ref: '#/components/schemas/links'
    deployment:
      $schema: http://json-schema.org/draft-07/schema#
      allOf:
        - $ref: '#/components/schemas/feature'
        - properties:
            properties:
              required:
                - validTime
                - members
              properties:
                featureType:
                  const: http://www.w3.org/ns/ssn/Deployment
                validTime:
                  description: Time period during which the systems where deployed.
                  $ref: '#/components/schemas/timePeriod'
                members@link:
                  description: Link to the collection of deployed systems.
                  $ref: '#/components/schemas/link-2'
    Deployment:
      $schema: http://json-schema.org/draft-07/schema#
      allOf:
        - $ref: '#/components/schemas/DescribedObject'
        - properties:
            type:
              const: Deployment
            location:
              description: The deployment location or area
              $ref: '#/components/schemas/Geometry'
            members:
              description: The list of deployed systems
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/link-2'
          required:
            - members
    deployment-2:
      $schema: http://json-schema.org/draft-07/schema#
      allOf:
        - $ref: '#/components/schemas/Deployment'
        - properties:
            definition:
              const: http://www.w3.org/ns/ssn/Deployment
            links:
              description: Links to related resources
              $ref: '#/components/schemas/links'
          required:
            - definition
    samplingFeature:
      $schema: http://json-schema.org/draft-07/schema#
      title: SamplingFeature
      allOf:
        - $ref: '#/components/schemas/feature'
        - type: object
          properties:
            properties:
              type: object
              required:
                - sampledFeature@link
              properties:
                sampledFeature@link:
                  $ref: '#/components/schemas/link-2'
    samplingSpatial:
      $schema: http://json-schema.org/draft-07/schema#
      allOf:
        - $ref: '#/components/schemas/samplingFeature'
        - type: object
          required:
            - geometry
          properties:
            properties:
              type: object
              properties:
                validTime:
                  $ref: '#/components/schemas/timePeriod'
                hostedSystem@link:
                  $ref: '#/components/schemas/link-2'
    samplingPoint:
      $schema: http://json-schema.org/draft-07/schema#
      title: SamplingPoint
      allOf:
        - $ref: '#/components/schemas/samplingSpatial'
        - type: object
          properties:
            geometry:
              oneOf:
                - $ref: '#/components/schemas/Point'
                - type: 'null'
            properties:
              type: object
              properties:
                featureType:
                  type: string
                  const: http://www.opengis.net/def/samplingFeatureType/OGC-OM/2.0/SF_SamplingPoint
    LineString:
      $schema: http://json-schema.org/draft-07/schema#
      $id: https://geojson.org/schema/LineString.json
      title: GeoJSON LineString
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          type: array
          minItems: 2
          items:
            type: array
            minItems: 2
            items:
              type: number
        bbox:
          type: array
          minItems: 4
          items:
            type: number
    samplingCurve:
      $schema: http://json-schema.org/draft-07/schema#
      title: SamplingCurve
      allOf:
        - $ref: '#/components/schemas/samplingSpatial'
        - type: object
          properties:
            geometry:
              oneOf:
                - $ref: '#/components/schemas/LineString'
                - type: 'null'
            properties:
              type: object
              properties:
                featureType:
                  type: string
                  const: http://www.opengis.net/def/samplingFeatureType/OGC-OM/2.0/SF_SamplingCurve
    Polygon:
      $schema: http://json-schema.org/draft-07/schema#
      $id: https://geojson.org/schema/Polygon.json
      title: GeoJSON Polygon
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          type: array
          items:
            type: array
            minItems: 4
            items:
              type: array
              minItems: 2
              items:
                type: number
        bbox:
          type: array
          minItems: 4
          items:
            type: number
    samplingSurface:
      $schema: http://json-schema.org/draft-07/schema#
      title: SamplingSurface
      allOf:
        - $ref: '#/components/schemas/samplingSpatial'
        - type: object
          properties:
            geometry:
              oneOf:
                - $ref: '#/components/schemas/Polygon'
                - type: 'null'
            properties:
              type: object
              properties:
                featureType:
                  type: string
                  const: http://www.opengis.net/def/samplingFeatureType/OGC-OM/2.0/SF_SamplingSurface
    samplingSolid:
      $schema: http://json-schema.org/draft-07/schema#
      title: SamplingSolid
      allOf:
        - $ref: '#/components/schemas/samplingSpatial'
        - type: object
          properties:
            geometry:
              oneOf:
                - $ref: '#/components/schemas/Point'
                - type: 'null'
            properties:
              type: object
              properties:
                featureType:
                  type: string
                  const: http://www.opengis.net/def/samplingFeatureType/OGC-OM/2.0/SF_SamplingSolid
    samplingSpecimen:
      $schema: http://json-schema.org/draft-07/schema#
      title: Specimen
      allOf:
        - $ref: '#/components/schemas/samplingFeature'
        - type: object
          properties:
            properties:
              type: object
              required:
                - samplingTime
                - materialClass
              properties:
                featureType:
                  type: string
                  const: http://www.opengis.net/def/samplingFeatureType/OGC-OM/2.0/SF_Specimen
                samplingTime:
                  $ref: '#/components/schemas/timeInstant'
                materialClass:
                  type: string
                  format: uri
                specimenType:
                  type: string
                  format: uri
                size:
                  type: number
                samplingMethod@link:
                  $ref: '#/components/schemas/link-2'
    samplingPart:
      $schema: http://json-schema.org/draft-07/schema#
      title: SamplingPart
      allOf:
        - $ref: '#/components/schemas/samplingFeature'
        - type: object
          properties:
            properties:
              type: object
              properties:
                featureType:
                  type: string
                  enum:
                    - http://www.opengis.net/def/samplingFeatureType/x-OGC-TBD/2.0/SF_FeaturePart
    samplingProxy:
      $schema: http://json-schema.org/draft-07/schema#
      title: FeatureProxy
      allOf:
        - $ref: '#/components/schemas/samplingFeature'
        - type: object
          properties:
            properties:
              type: object
              properties:
                featureType:
                  type: string
                  enum:
                    - http://www.opengis.net/def/samplingFeatureType/x-OGC-TBD/2.0/SF_FeatureProxy
    anySamplingFeature:
      $schema: http://json-schema.org/draft-07/schema#
      oneOf:
        - $ref: '#/components/schemas/samplingPoint'
        - $ref: '#/components/schemas/samplingCurve'
        - $ref: '#/components/schemas/samplingSurface'
        - $ref: '#/components/schemas/samplingSolid'
        - $ref: '#/components/schemas/samplingSpecimen'
        - $ref: '#/components/schemas/samplingPart'
        - $ref: '#/components/schemas/samplingProxy'
        - $comment: or something else but it must have another URI
          allOf:
            - $ref: '#/components/schemas/samplingFeature'
            - type: object
              properties:
                properties:
                  type: object
                  properties:
                    featureType:
                      type: string
                      not:
                        enum:
                          - http://www.opengis.net/def/samplingFeatureType/OGC-OM/2.0/SF_SamplingPoint
                          - http://www.opengis.net/def/samplingFeatureType/OGC-OM/2.0/SF_SamplingCurve
                          - http://www.opengis.net/def/samplingFeatureType/OGC-OM/2.0/SF_SamplingSurface
                          - http://www.opengis.net/def/samplingFeatureType/OGC-OM/2.0/SF_SamplingSolid
                          - http://www.opengis.net/def/samplingFeatureType/OGC-OM/2.0/SF_Specimen
                          - http://www.opengis.net/def/samplingFeatureType/x-OGC-TBD/2.0/SF_FeaturePart
                          - http://www.opengis.net/def/samplingFeatureType/x-OGC-TBD/2.0/SF_FeatureProxy
    DerivedProperty:
      $schema: http://json-schema.org/draft-07/schema#
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractSweIdentifiable'
        - properties:
            uniqueId:
              description: Unique ID for this property
              type: string
              format: uri
              example: urn:example:property:avg-cpu-temp
            label:
              example: Average CPU Temp
            description:
              example: Hourly average of the CPU temperature
            baseProperty:
              description: URI pointing to the definition of the base property this property is derived from
              type: string
              format: uri
              example: https://qudt.org/vocab/quantitykind/Temperature
            object:
              description: URI pointing to the type of entity that the base property applies to
              type: string
              format: uri
              example: http://dbpedia.org/resource/Central_processing_unit
            statistic:
              description: URI pointing to the definition of the statistic applied to the base property values
              type: string
              format: uri
              example: http://sensorml.com/ont/x-stats/HourlyMean
            qualifiers:
              type: array
              minItems: 1
              items:
                $ref: '#/components/schemas/AnySimpleComponent'
          required:
            - label
            - baseProperty
    property:
      $schema: http://json-schema.org/draft-07/schema#
      allOf:
        - $ref: '#/components/schemas/DerivedProperty'
        - properties:
            links:
              description: Links to related resources
              $ref: '#/components/schemas/links'
  responses:
    '201':
      description: Success. New resource created.
      headers:
        Location:
          schema:
            type: string
          description: URI of newly created resource
    '400':
      description: Bad request. Either the query parameters or the content body are invalid.
    '401':
      description: No authentication information was provided.
    '403':
      description: The user doesn't have the necessary permissions to access the resource.
    '404':
      description: No resource was found with the specified URL.
    landingPage:
      description: The links to the API capabilities.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/landingPage'
          example:
            title: OGC API - Connected Systems
            description: Access to system datastreams and command and control capabilities.
            links:
              - rel: service-desc
                href: https://data.example.com/api/doc
              - rel: conformance
                href: https://data.example.com/api/conformance
              - rel: collections
                href: https://data.example.com/api/collections
    conformance:
      description: The URIs of all requirements classes supported by the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/confClasses'
          example:
            conformsTo:
              - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/core
              - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/html
              - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/json
              - http://www.opengis.net/spec/ogcapi-common-1/1.0/conf/oas30
              - http://www.opengis.net/spec/ogcapi-common-2/0.0/conf/collections
              - http://www.opengis.net/spec/ogcapi-common-2/0.0/conf/html
              - http://www.opengis.net/spec/ogcapi-common-2/0.0/conf/json
              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core
              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson
              - http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/html
              - http://www.opengis.net/spec/ogcapi-features-4/1.0/conf/create-replace-delete
              - http://www.opengis.net/spec/ogcapi-connectedsystems-1/1.0/conf/core
              - http://www.opengis.net/spec/ogcapi-connectedsystems-1/1.0/conf/system-features
              - http://www.opengis.net/spec/ogcapi-connectedsystems-1/1.0/conf/procedure-features
              - http://www.opengis.net/spec/ogcapi-connectedsystems-1/1.0/conf/deployment-features
              - http://www.opengis.net/spec/ogcapi-connectedsystems-1/1.0/conf/sampling-features
              - http://www.opengis.net/spec/ogcapi-connectedsystems-2/1.0/conf/encoding/geojson
              - http://www.opengis.net/spec/ogcapi-connectedsystems-1/1.0/conf/encoding/sensorml
    collections:
      description: The list of collections available on this endpoint
      content:
        application/json:
          schema:
            type: object
            required:
              - links
              - collections
            properties:
              links:
                type: array
                items:
                  $ref: '#/components/schemas/link'
              collections:
                type: array
                items:
                  $ref: '#/components/schemas/collection_schema'
          example:
            collections:
              - id: all_systems
                title: All Connected Systems
                description: All systems registered on this server (e.g. platforms, sensors, actuators, processes)
                itemType: feature
                featureType: system
                links:
                  - rel: items
                    title: Access the system instances in this collection
                    href: https://data.example.org/api/systems
                    type: application/json
              - id: all_procedures
                title: All Procedures and System Datasheets
                description: All procedures (e.g. system datasheets) implemented by systems registered on this server
                itemType: feature
                featureType: procedure
                links:
                  - rel: items
                    title: Access the procedures in this collection
                    href: https://data.example.org/api/procedures
                    type: application/json
              - id: all_deployments
                title: All System Deployments
                description: All deployments involving systems registered on this server
                itemType: feature
                featureType: deployment
                links:
                  - rel: items
                    title: Access the procedures in this collection
                    href: https://data.example.org/api/deployments
                    type: application/json
            links:
              - rel: self
                title: This document
                href: https://data.example.org/api/collections?f=application/json
                type: application/json
              - rel: alternate
                title: This document as HTML
                href: https://data.example.org/api/collections?f=text/html
                type: text/html
    collection:
      description: Metadata for a feature collection.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/collection_schema'
    featureCollection:
      description: Feature collection resource
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/featureCollectionGeoJSON'
    feature:
      description: Feature resource
      content:
        application/geo+json:
          schema:
            allOf:
              - $ref: '#/components/schemas/feature'
              - type: object
                required:
                  - id
    systemCollection:
      description: OK. Successful request
      content:
        application/json:
          schema:
            type: object
            required: items
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/system'
              links:
                description: Links to related resources (including paging)
                $ref: '#/components/schemas/links'
        application/geo+json:
          schema:
            type: object
            required: features
            properties:
              type:
                type: string
                const: FeatureCollection
              features:
                type: array
                items:
                  $ref: '#/components/schemas/system'
              links:
                description: Links to related resources (including paging)
                $ref: '#/components/schemas/links'
        application/sml+json:
          schema:
            type: object
            required: items
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/system-2'
              links:
                description: Links to related resources (including paging)
                $ref: '#/components/schemas/links'
    5XX:
      description: Unexpected server error. Only retry on 502 and 503.
    resourceLinks:
      description: Success. Several new resources created. (Only sent if the payload contained an array of resources).
      content:
        application/json:
          schema:
            type: object
            required: items
            properties:
              items:
                description: Array of resource URIs
                type: array
                items:
                  type: string
                  format: uri
          example:
            - https://data.example.org/api/{collection_path}/546861
            - https://data.example.org/api/{collection_path}/546862
            - https://data.example.org/api/{collection_path}/546863
    system:
      description: OK. Successful request
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/system'
        application/sml+json:
          schema:
            $ref: '#/components/schemas/system-2'
    204_PUT:
      description: Success. Resource updated.
    204_DELETE:
      description: Success. Resource deleted.
    409_DELETE:
      description: The resource cannot be deleted because other resources depend on it.
    procedureCollection:
      description: OK. Successful request
      content:
        application/json:
          schema:
            type: object
            required: items
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/procedure'
              links:
                description: Links to related resources (including paging)
                $ref: '#/components/schemas/links'
        application/geo+json:
          schema:
            type: object
            required: features
            properties:
              type:
                type: string
                const: FeatureCollection
              features:
                type: array
                items:
                  $ref: '#/components/schemas/procedure'
              links:
                description: Links to related resources (including paging)
                $ref: '#/components/schemas/links'
        application/sml+json:
          schema:
            type: object
            required: items
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/procedure-2'
              links:
                description: Links to related resources (including paging)
                $ref: '#/components/schemas/links'
    deploymentCollection:
      description: OK. Successful request
      content:
        application/json:
          schema:
            type: object
            required: items
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/deployment'
              links:
                description: Links to related resources (including paging)
                $ref: '#/components/schemas/links'
        application/geo+json:
          schema:
            type: object
            required: features
            properties:
              type:
                type: string
                const: FeatureCollection
              features:
                type: array
                items:
                  $ref: '#/components/schemas/deployment'
              links:
                description: Links to related resources (including paging)
                $ref: '#/components/schemas/links'
        application/sml+json:
          schema:
            type: object
            required: items
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/deployment-2'
              links:
                description: Links to related resources (including paging)
                $ref: '#/components/schemas/links'
    samplingFeatureCollection:
      description: OK. Successful request
      content:
        application/json:
          schema:
            type: object
            required: items
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/anySamplingFeature'
              links:
                description: Links to related resources (including paging)
                $ref: '#/components/schemas/links'
        application/geo+json:
          schema:
            type: object
            required: features
            properties:
              type:
                type: string
                const: FeatureCollection
              features:
                type: array
                items:
                  $ref: '#/components/schemas/anySamplingFeature'
              links:
                type: array
                items:
                  $ref: '#/components/schemas/link-2'
    propertyCollection:
      description: OK. Successful request
      content:
        application/sml+json:
          schema:
            type: object
            required: items
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/property'
              links:
                description: Links to related resources (including paging)
                $ref: '#/components/schemas/links'
    property:
      description: OK. Successful request
      content:
        application/sml+json:
          schema:
            $ref: '#/components/schemas/property'
  parameters:
    bbox:
      name: bbox
      in: query
      description: |-
        The bounding box is provided as four or six numbers, depending on whether the
        coordinate reference system includes a vertical axis (height or depth).

        Only features that have a geometry that intersects the bounding box are selected.

        The order of coordinates is as follow:

        * Lower left corner, coordinate axis 1
        * Lower left corner, coordinate axis 2
        * Minimum value, coordinate axis 3 (optional)
        * Upper right corner, coordinate axis 1
        * Upper right corner, coordinate axis 2
        * Maximum value, coordinate axis 3 (optional)

        If the value consists of four numbers, the coordinate reference system is
        WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)
        unless a different coordinate reference system is specified in the parameter `bbox-crs`.

        If the value consists of six numbers, the coordinate reference system is WGS 84 
        longitude/latitude/ellipsoidal height (http://www.opengis.net/def/crs/OGC/0/CRS84h)
        unless a different coordinate reference system is specified in the parameter `bbox-crs`.

        The query parameter `bbox-crs` is specified in OGC API - Features - Part 2: Coordinate 
        Reference Systems by Reference.

        For WGS 84 longitude/latitude the values are in most cases the sequence of
        minimum longitude, minimum latitude, maximum longitude and maximum latitude.
        However, in cases where the box spans the antimeridian the first value
        (west-most box edge) is larger than the third value (east-most box edge).

        If the vertical axis is included, the third and the sixth number are the
        bottom and the top of the 3-dimensional bounding box.

        If a feature has multiple spatial geometry properties, it is the decision of the
        server whether only a single spatial geometry property is used to determine
        the extent or all relevant geometries.
      required: false
      schema:
        oneOf:
          - type: array
            title: 2D Bbox
            minItems: 4
            maxItems: 4
            items:
              type: number
          - type: array
            title: 3D Bbox
            minItems: 6
            maxItems: 6
            items:
              type: number
      style: form
      explode: false
      examples:
        2d:
          summary: 2D bbox
          value: '-180,-90,180,90'
        3d:
          summary: 3D bbox
          value: '-180,-90,180,90,0,1000'
    datetime:
      name: datetime
      in: query
      description: |-
        Either a date-time or an interval. Date and time expressions adhere to RFC 3339. 
        Intervals may be bounded or half-bounded (double-dots at start or end).

        Only features that have a `validTime` property that intersects the value of
        `datetime` are selected.

        If history is supported for a feature type, the following also applies:
        - if `datetime` is a time instant or `now`, only the description valid at the specified time is selected
        - if `datetime` is a time period, only the latest description valid during the period is selected
        - The response can never include more that one description of the same feature
      required: false
      schema:
        $ref: '#/components/schemas/datetimeSchema'
      style: form
      explode: false
      examples:
        instant:
          summary: Time instant
          value: '2018-02-12T23:20:50Z'
        now:
          summary: Current time
          value: now
        period:
          summary: Bounded interval
          value: 2018-02-12T00:00:00Z/2018-03-18T12:31:12Z
        period2:
          summary: Half-bounded interval
          value: 2018-02-12T00:00:00Z/..
        period3:
          summary: From date/time to now
          value: 2018-02-12T00:00:00Z/now
        period4:
          summary: From now to date/time
          value: now/2018-02-12T00:00:00Z
        period5:
          summary: Anything up to now
          value: ../now
        period6:
          summary: Anything from now on
          value: now/..
        latest:
          summary: Latest
          value: latest
    geom:
      name: geom
      in: query
      description: |-
        WKT geometry and operator to filter resources on their location or geometry.

        Only features that have a geometry that intersects the value of `geom` are selected.
      required: false
      schema:
        type: string
      examples:
        point:
          value: LINESTRING((-86.53 12.45), (-86.54 12.46), (-86.55 12.47))
        polygon:
          value: POLYGON((0 0,4 0,4 4,0 4,0 0))
    keyword:
      name: q
      in: query
      description: |-
        Comma separated list of keywords used for full-text search.

        Only resources that have textual fields that contain one of the specified keywords are selected.

        The resource `name` and `description` properties are always searched.
        It is up to the server to decide which other textual fields are searched.
      required: false
      schema:
        type: array
        items:
          type: string
          minLength: 1
          maxLength: 50
      explode: false
      examples:
        case1:
          summary: One keyword
          value: temp
        case2:
          summary: Several keywords
          value: gps,imu
    limit:
      name: limit
      in: query
      description: |-
        This parameter limits the number of items that are presented in the response document.

        Only items that are on the first level of the collection in the response document are counted.
        Nested objects contained within the explicitly requested items shall not be counted.
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 10000
        default: 10
      style: form
      explode: false
    collectionId:
      name: collectionId
      in: path
      description: Local identifier of a collection
      required: true
      schema:
        type: string
        minLength: 1
    featureId:
      name: featureId
      in: path
      description: Local identifier of a Feature
      required: true
      schema:
        type: string
        minLength: 1
    idList:
      name: id
      description: |-
        List of resource local IDs or unique IDs (URI).
        Only resources that have one of the provided identifiers are selected.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/idListSchema'
      explode: false
      examples:
        id:
          summary: Local IDs
          value: RES_ID1,RES_ID2,RES_ID63
        uri:
          summary: Unique IDs
          value: urn:example:resource:001,urn:example:resource:033
    parentIdList:
      name: parent
      description: |-
        List of resource local IDs or unique IDs (URI).
        Only resources that have a parent that has one of the provided identifiers are selected.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/idListSchema'
      explode: false
    procedureIdList:
      name: procedure
      description: |-
        List of procedure local IDs or unique IDs (URI).
        Only systems that implement a procedure that has one of the provided identifiers are selected.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/idListSchema'
      explode: false
    foiIdList:
      name: foi
      description: |-
        List of feature local IDs or unique IDs (URI).
        Only resources that are associated to a feature of interest that has one of the provided identifiers are selected.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/idListSchema'
      explode: false
    obsPropIdList:
      name: observedProperty
      description: |-
        List of property local IDs or unique IDs (URI).
        Only resources that are associated to an observable property that has one of the provided identifiers are selected.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/idListSchema'
      explode: false
    controlPropIdList:
      name: controlledProperty
      description: |-
        List of property local IDs or unique IDs (URI).
        Only resources that are associated to a controllable property that has one of the provided identifiers are selected.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/idListSchema'
      explode: false
    systemId:
      name: systemId
      in: path
      description: Local identifier of a System
      required: true
      schema:
        type: string
        minLength: 1
    cascade:
      name: cascade
      in: query
      description: If set to true, dependent resources are also deleted.
      required: false
      schema:
        type: boolean
        default: false
    procedureId:
      name: procedureId
      in: path
      description: Local identifier of a Procedure
      required: true
      schema:
        type: string
        minLength: 1
    systemIdList:
      name: system
      description: |-
        List of system local IDs or unique IDs (URI).
        Only resources that are associated to a System that has one of the provided identifiers are selected.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/idListSchema'
      explode: false
    deploymentId:
      name: deploymentId
      in: path
      description: Local identifier of a Deployment
      required: true
      schema:
        type: string
        minLength: 1
    propId:
      name: propId
      in: path
      description: Local identifier of a Property
      required: true
      schema:
        type: string
        minLength: 1
  requestBodies:
    systemOrArray:
      description: One or more system resources
      required: true
      content:
        application/geo+json:
          schema:
            oneOf:
              - title: Single System
                $ref: '#/components/schemas/system'
              - title: List of Systems
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/system'
          examples:
            sensor:
              summary: Sensor - Simple Thermometer
              value:
                type: Feature
                id: '123'
                geometry:
                  type: Point
                  coordinates:
                    - 41.8781
                    - -87.6298
                properties:
                  uid: urn:x-ogc:systems:001
                  name: Outdoor Thermometer 001
                  description: Digital thermometer located on first floor window 1
                  featureType: http://www.w3.org/ns/sosa/Sensor
                  assetType: http://www.opengis.net/def/x-OGC/TBD/Equipment
                  procedure@link:
                    href: https://data.example.org/api/procedures/TP60S?f=json
                    uid: urn:x-myorg:datasheets:ThermoPro:TP60S:v001
                    title: Thermo Pro TP60S
                    type: application/geo+json
            platform:
              summary: Platform - Unmanned Aerial Vehicle (UAV)
              value:
                type: Feature
                id: PLT412
                geometry: null
                properties:
                  uid: urn:x-ogc:systems:uav:solo154
                  name: UAV System 412
                  description: 3DR Solo UAV
                  featureType: http://www.w3.org/ns/sosa/Platform
                  procedure@link:
                    href: https://data.example.org/api/procedures/nrof8qi7wc9a?f=json
                    uid: urn:x-ogc:datasheets:uav:3dr-solo:v1
                    type: application/geo+json
        application/sml+json:
          schema:
            oneOf:
              - title: Single System
                $ref: '#/components/schemas/system-2'
              - title: List of Systems
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/system-2'
          examples:
            sensor:
              summary: Sensor - Simple Thermometer
              value:
                type: PhysicalSystem
                id: '123'
                definition: http://www.w3.org/ns/sosa/Sensor
                uniqueId: urn:x-ogc:systems:001
                name: Outdoor Thermometer 001
                description: Digital thermometer located on first floor window 1
                typeOf:
                  href: https://data.example.org/api/procedures/TP60S?f=sml
                  uid: urn:x-myorg:datasheets:ThermoPro:TP60S:v001
                  title: ThermoPro TP60S
                  type: application/sml+json
                identifiers:
                  - definition: http://sensorml.com/ont/swe/property/SerialNumber
                    label: Serial Number
                    value: '0123456879'
                contacts:
                  - role: http://sensorml.com/ont/swe/roles/Operator
                    organisationName: Field Maintenance Corp.
                position:
                  type: Point
                  coordinates:
                    - 41.8781
                    - -87.6298
            platform:
              summary: Platform - Unmanned Aerial Vehicle (UAV)
              value:
                type: PhysicalSystem
                id: PLT412
                definition: http://www.w3.org/ns/sosa/Platform
                uniqueId: urn:x-ogc:systems:aircraft:101
                name: Global Hawk 101
                description: Example UAV platform
                typeOf:
                  href: https://data.example.org/api/procedures/ge4pjqq0hq6y?f=json
                  uid: urn:x-ogc:datasheets:uav:RQ-4
                  type: application/sml+json
                identifiers:
                  - definition: http://sensorml.com/ont/swe/property/SerialNumber
                    label: Serial Number
                    value: '0123456879'
                contacts:
                  - role: http://sensorml.com/ont/swe/property/Operator
                    organisationName: Field Maintenance Corp.
                localReferenceFrames:
                  - label: Platform Frame
                    description: The platform frame is defined as the aircraft principal axes
                    origin: Center of gravity of the aircraft
                    axis:
                      - name: x
                        description: Longitudinal or roll axis, parallel to the fuselage reference line, directed forward
                      - name: 'y'
                        description: Transverse or pitch axis, parallel to the libne drawn from wingtop to wingtip, directed to the right
                      - name: z
                        description: Vertical or yaw axis, perpendicular to the wings and to the fuselage reference line, directed toward the bottom of the aircraft
    systemOrArrayOrRefs:
      required: true
      content:
        application/json:
          description: A list of system descriptions or links
          schema:
            title: One or more links or UIDs of system resources
            type: array
            minItems: 1
            items:
              type: string
              format: uri
          examples:
            link:
              summary: Links to Systems resources
              value:
                - https://data.example.org/api/systems/2f35ofoms2l6
                - https://data.example.org/api/systems/PLT412
        application/geo+json:
          schema:
            oneOf:
              - title: Single System
                $ref: '#/components/schemas/system'
              - title: List of Systems
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/system'
        application/sml+json:
          schema:
            oneOf:
              - title: Single System
                $ref: '#/components/schemas/system-2'
              - title: List of Systems
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/system-2'
    system:
      required: true
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/system'
          examples:
            sensor:
              summary: Sensor - Simple Thermometer
              value:
                type: Feature
                id: '123'
                geometry:
                  type: Point
                  coordinates:
                    - 41.8781
                    - -87.6298
                properties:
                  uid: urn:x-ogc:systems:001
                  name: Outdoor Thermometer 001
                  description: Digital thermometer located on first floor window 1
                  featureType: http://www.w3.org/ns/sosa/Sensor
                  assetType: http://www.opengis.net/def/x-OGC/TBD/Equipment
                  procedure@link:
                    href: https://data.example.org/api/procedures/TP60S?f=json
                    uid: urn:x-myorg:datasheets:ThermoPro:TP60S:v001
                    title: Thermo Pro TP60S
                    type: application/geo+json
            platform:
              summary: Platform - Unmanned Aerial Vehicle (UAV)
              value:
                type: Feature
                id: PLT412
                geometry: null
                properties:
                  uid: urn:x-ogc:systems:uav:solo154
                  name: UAV System 412
                  description: 3DR Solo UAV
                  featureType: http://www.w3.org/ns/sosa/Platform
                  procedure@link:
                    href: https://data.example.org/api/procedures/nrof8qi7wc9a?f=json
                    uid: urn:x-ogc:datasheets:uav:3dr-solo:v1
                    type: application/geo+json
        application/sml+json:
          schema:
            oneOf:
              - title: Single System
                $ref: '#/components/schemas/system-2'
              - title: List of Systems
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/system-2'
          examples:
            sensor:
              summary: Sensor - Simple Thermometer
              value:
                type: PhysicalSystem
                id: '123'
                definition: http://www.w3.org/ns/sosa/Sensor
                uniqueId: urn:x-ogc:systems:001
                name: Outdoor Thermometer 001
                description: Digital thermometer located on first floor window 1
                typeOf:
                  href: https://data.example.org/api/procedures/TP60S?f=sml
                  uid: urn:x-myorg:datasheets:ThermoPro:TP60S:v001
                  title: ThermoPro TP60S
                  type: application/sml+json
                identifiers:
                  - definition: http://sensorml.com/ont/swe/property/SerialNumber
                    label: Serial Number
                    value: '0123456879'
                contacts:
                  - role: http://sensorml.com/ont/swe/roles/Operator
                    organisationName: Field Maintenance Corp.
                position:
                  type: Point
                  coordinates:
                    - 41.8781
                    - -87.6298
            platform:
              summary: Platform - Unmanned Aerial Vehicle (UAV)
              value:
                type: PhysicalSystem
                id: PLT412
                definition: http://www.w3.org/ns/sosa/Platform
                uniqueId: urn:x-ogc:systems:aircraft:101
                name: Global Hawk 101
                description: Example UAV platform
                typeOf:
                  href: https://data.example.org/api/procedures/ge4pjqq0hq6y?f=json
                  uid: urn:x-ogc:datasheets:uav:RQ-4
                  type: application/sml+json
                identifiers:
                  - definition: http://sensorml.com/ont/swe/property/SerialNumber
                    label: Serial Number
                    value: '0123456879'
                contacts:
                  - role: http://sensorml.com/ont/swe/property/Operator
                    organisationName: Field Maintenance Corp.
                localReferenceFrames:
                  - label: Platform Frame
                    description: The platform frame is defined as the aircraft principal axes
                    origin: Center of gravity of the aircraft
                    axis:
                      - name: x
                        description: Longitudinal or roll axis, parallel to the fuselage reference line, directed forward
                      - name: 'y'
                        description: Transverse or pitch axis, parallel to the libne drawn from wingtop to wingtip, directed to the right
                      - name: z
                        description: Vertical or yaw axis, perpendicular to the wings and to the fuselage reference line, directed toward the bottom of the aircraft
    procedureOrArray:
      description: One or more procedure resources
      required: true
      content:
        application/geo+json:
          schema:
            oneOf:
              - title: Single Procedure
                $ref: '#/components/schemas/procedure'
              - title: List of Procedures
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/procedure'
          examples:
            sensor:
              summary: Sensor Datasheet
              value:
                type: Feature
                id: iv3f2kcq27gfi
                geometry: null
                properties:
                  uid: urn:x-gill:datasheets:windmaster:v1
                  name: Gill WindMaster
                  description: Precision 3-axis ultrasonic anemometer
                  featureType: http://www.w3.org/ns/sosa/ObservingProcedure
                links:
                  - href: https://data.example.org/api/procedures/iv3f2kcq27gfi?f=json
                    rel: self
                    type: application/geo+json
                    title: this document
                  - href: https://data.example.org/api/procedures/iv3f2kcq27gfi?f=sml
                    rel: alternate
                    type: application/sml+json
                    title: this resource as SensorML
        application/sml+json:
          schema:
            oneOf:
              - title: Single Procedure
                $ref: '#/components/schemas/procedure-2'
              - title: List of Procedures
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/procedure-2'
          examples:
            sensor:
              summary: Sensor Datasheet
              value:
                type: PhysicalComponent
                id: iv3f2kcq27gfi
                definition: http://www.w3.org/ns/sosa/ObservingProcedure
                uniqueId: urn:osh:sensors:saildrone:S0004
                name: 3D Ultrasonic Anemometer
                description: Precision 3-axis ultrasonic anemometer
                identifiers:
                  - definition: http://sensorml.com/ont/swe/property/Manufacturer
                    label: Manufacturer Name
                    value: Gill
                  - definition: http://sensorml.com/ont/swe/property/ModelNumber
                    label: Model Number
                    value: WindMaster
                classifiers:
                  - definition: http://sensorml.com/ont/swe/property/SensorType
                    label: Sensor Type
                    value: Anemometer
                capabilities:
                  - definition: http://www.w3.org/ns/ssn/systems/SystemCapability
                    label: Speed Measurement Capabilities
                    capabilities:
                      - name: range
                        type: QuantityRange
                        definition: http://www.w3.org/ns/ssn/systems/MeasurementRange
                        label: Measurement Range
                        uom:
                          code: m/s
                        value:
                          - 0
                          - 50
                      - name: resolution
                        type: Quantity
                        definition: http://www.w3.org/ns/ssn/systems/Resolution
                        label: Resolution
                        uom:
                          code: m/s
                        value: 0.01
                      - name: accuracy
                        type: Quantity
                        definition: http://sensorml.com/ont/swe/property/RelativeAccuracy
                        label: Relative Accuracy
                        uom:
                          code: '%'
                        value: 1.5
                links:
                  - href: https://data.example.org/api/procedures/iv3f2kcq27gfi?f=sml
                    rel: self
                    type: application/sml+json
                    title: this document
                  - href: https://data.example.org/api/procedures/iv3f2kcq27gfi?f=json
                    rel: alternate
                    type: application/geo+json
                    title: this resource as GeoJSON
    deploymentOrArray:
      description: One or more procedure resources
      required: true
      content:
        application/geo+json:
          schema:
            oneOf:
              - title: Single Deployment
                $ref: '#/components/schemas/deployment'
              - title: List of Deployments
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/deployment'
          examples:
            sensor:
              summary: Unmanned Surface Vehicle (USV) Deployment
              value:
                type: Feature
                id: iv3f2kcq27gfi
                geometry:
                  type: Polygon
                  coordinates:
                    - - - 53.76
                        - -173.7
                      - - 53.76
                        - -155.07
                      - - 75.03
                        - -155.07
                      - - 75.03
                        - -173.7
                      - - 53.76
                        - -173.7
                properties:
                  uid: urn:x-ogc:deployments:D001
                  name: Saildrone - 2017 Arctic Mission
                  featureType: http://www.w3.org/ns/ssn/Deployment
                  description: In July 2017, three saildrones were launched from Dutch Harbor, Alaska, in partnership with NOAA Research...
                  validTime:
                    - '2017-07-17T00:00:00Z'
                    - '2017-09-29T00:00:00Z'
                  members:
                    href: https://data.example.org/api/deployments/iv3f2kcq27gfi/systems?f=json
                    type: application/geo+json
                    title: Deployed Systems
                links:
                  - href: https://data.example.org/api/deployments/iv3f2kcq27gfi?f=json
                    rel: self
                    type: application/geo+json
                    title: this document
                  - href: https://data.example.org/api/deployments/iv3f2kcq27gfi?f=sml
                    rel: alternate
                    type: application/sml+json
                    title: this resource as SensorML
        application/sml+json:
          schema:
            oneOf:
              - title: Single Deployment
                $ref: '#/components/schemas/deployment-2'
              - title: List of Deployments
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/deployment-2'
          examples:
            sensor:
              summary: Unmanned Surface Vehicle (USV) Deployment
              value:
                type: Deployment
                id: iv3f2kcq27gfi
                definition: http://www.w3.org/ns/ssn/Deployment
                uniqueId: urn:x-saildrone:mission:2025
                name: Saildrone - 2017 Arctic Mission
                description: In July 2017, three saildrones were launched from Dutch Harbor, Alaska, in partnership with NOAA Research...
                classifiers:
                  - definition: https://schema.org/DefinedRegion
                    label: Region
                    value: Arctic
                contacts:
                  - role: http://sensorml.com/ont/swe/property/Operator
                    organisationName: Saildrone, Inc.
                    contactInfo:
                      onlineResource: https://www.saildrone.com/
                      address:
                        deliveryPoint: 1050 W. Tower Ave.
                        city: Alameda
                        postalCode: '94501'
                        administrativeArea: CA
                        country: USA
                  - role: http://sensorml.com/ont/swe/property/DataProvider
                    organisationName: NOAA Pacific Marine Environmental Laboratory (PMEL)
                    contactInfo:
                      onlineResource: https://www.pmel.noaa.gov
                location:
                  type: Polygon
                  coordinates:
                    - - - 53.76
                        - -173.7
                      - - 75.03
                        - -173.7
                      - - 75.03
                        - -155.07
                      - - 53.76
                        - -155.07
                      - - 53.76
                        - -173.7
                members:
                  - href: https://data.example.org/api/systems/2f35ofoms2l6?f=sml
                    uid: urn:x-saildrone:platforms:SD-1001
                    type: application/sml+json
                  - href: https://data.example.org/api/systems/2f35ofoms2l8?f=sml
                    uid: urn:x-saildrone:platforms:SD-1002
                    type: application/sml+json
                  - href: https://data.example.org/api/systems/2f35ofoms2l9?f=sml
                    uid: urn:x-saildrone:platforms:SD-1003
                    type: application/sml+json
                links:
                  - href: https://data.example.org/api/deployments/iv3f2kcq27gfi?f=sml
                    rel: self
                    type: application/sml+json
                    title: this document
                  - href: https://data.example.org/api/deployments/iv3f2kcq27gfi?f=json
                    rel: alternate
                    type: application/geo+json
                    title: this resource as GeoJSON
    samplingFeatureOrArray:
      description: One or more procedure resources
      required: true
      content:
        application/geo+json:
          schema:
            oneOf:
              - title: Single Feature
                $ref: '#/components/schemas/anySamplingFeature'
              - title: List of Features
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/anySamplingFeature'
          examples:
            sf-point:
              summary: Sampling Point
              value:
                type: Feature
                id: SP001
                geometry:
                  type: Point
                  coordinates:
                    - 12.31
                    - -86.98
                properties:
                  uid: urn:x-usgs:sites:301244087575701
                  name: 'USGS Site #301244087575701'
                  description: Well at MOBILE RIVER SAWMILL CORP
                  featureType: http://www.opengis.net/def/samplingFeatureType/OGC-OM/2.0/SF_SamplingPoint
                  sampledFeature@link:
                    href: https://api.usgs.gov/collections/hydrological_features/items/112TRRC?f=json
                    type: application/geo+json
                    title: Aquifer 112TRRC
                  hostedSystem@link:
                    href: https://data.example.org/api/systems/447845?f=json
                    type: application/geo+json
                    uid: urn:x-ogc:systems:hydro:WS454EAF25
                links:
                  - href: https://data.example.org/api/samplingFeatures/SP001?f=json
                    rel: self
                    type: application/geo+json
                    title: this document
                  - href: https://data.example.org/api/samplingFeatures/SP001?f=html
                    rel: alternate
                    type: text/html
                    title: this resource as HTML
            specimen:
              summary: Specimen
              value:
                type: Feature
                id: f6b464cf
                geometry:
                  type: Point
                  coordinates:
                    - 30.706
                    - -134.196
                    - 272
                properties:
                  uid: urn:x-usgs:samples:1114457888
                  name: 'USGS Site #301244087575701'
                  description: Rock sample collected on traverse
                  featureType: http://www.opengis.net/def/samplingFeatureType/OGC-OM/2.0/SF_Specimen
                  samplingTime: '2007-01-24T12:14:50Z'
                  materialClass: http://www.opengis.net/def/material/OGC-OM/2.0/rock
                  sampledFeature@link:
                    href: https://api.usgs.gov/collections/geological_features/items/1458955?f=json
                    title: Geological Unit 235
                    type: application/geo+json
                links:
                  - href: https://data.example.org/api/samplingFeatures/f6b464cf?f=json
                    rel: self
                    type: application/geo+json
                    title: this document
                  - href: https://data.example.org/api/samplingFeatures/f6b464cf?f=html
                    rel: alternate
                    type: text/html
                    title: this resource as HTML
            part:
              summary: Feature Part
              value:
                type: Feature
                id: 1a0f80f9
                geometry: null
                properties:
                  uid: urn:x-ogc:sf:456
                  name: CPU 2
                  description: CPU 2 located in the robot chassis
                  featureType: http://www.opengis.net/def/samplingFeatureType/x-OGC-TBD/2.0/SF_FeaturePart
                  sampledFeature@link:
                    href: https://data.example.org/api/systems/8624d054?f=json
                    type: application/geo+json
                    uid: urn:x-ogc:systems:robot445
                links:
                  - href: https://data.example.org/api/samplingFeatures/1a0f80f9?f=json
                    rel: self
                    type: application/geo+json
                    title: this document
                  - href: https://data.example.org/api/samplingFeatures/1a0f80f9?f=html
                    rel: alternate
                    type: application/sensorml+json
                    title: this resource as HTML
                  - href: https://data.example.org/api/samplingFeatures/1a0f80f9?f=html
                    rel: alternate
                    type: text/html
                    title: this resource as HTML
    propertyOrArray:
      description: One or more procedure resources
      required: true
      content:
        application/sml+json:
          schema:
            oneOf:
              - title: Single Property
                $ref: '#/components/schemas/property'
              - title: List of Properties
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/property'
          examples:
            enginetemp:
              summary: Engine Temperature
              value:
                id: EngineTemp
                label: Engine Temp
                description: Temperature of the engine oil, measured at the bottom of the engine block
                baseProperty: https://qudt.org/vocab/quantitykind/Temperature
                object: http://dbpedia.org/resource/Central_processing_unit
                links:
                  - rel: self
                    href: https://data.example.com/api/properties/EngineTemp
            cputemp:
              summary: Average CPU Temperature
              value:
                id: AverageCpuTemp
                label: Average CPU Temp
                description: Hourly average of the CPU temperature
                baseProperty: https://qudt.org/vocab/quantitykind/Temperature
                object: http://dbpedia.org/resource/Central_processing_unit
                statistic: http://sensorml.com/ont/x-stats/HourlyMean
                links:
                  - rel: self
                    href: https://data.example.com/api/properties/AverageCpuTemp
            rfpower:
              summary: Received Band-X RF Power
              value:
                id: RFPower_Received_620-720
                baseProperty: http://qudt.org/vocab/quantitykind/RF-Power
                label: Received RF Power
                description: RF Power received in band 620-720 MHz
                qualifiers:
                  - type: QuantityRange
                    definition: http://qudt.org/vocab/quantitykind/Frequency
                    label: Frequency Range
                    uom:
                      code: MHz
                    value:
                      - 620
                      - 720
                links:
                  - rel: self
                    href: https://data.example.com/api/properties/RFPower_Received_620-720
    property:
      required: true
      content:
        application/sml+json:
          schema:
            oneOf:
              - title: Single Property
                $ref: '#/components/schemas/property'
              - title: List of Properties
                type: array
                minItems: 1
                items:
                  $ref: '#/components/schemas/property'
